I"2<p>I don’t know about you, but I tend to forget that there is a responder
chain in iOS. This post is to remind myself (and you) that the responder
chain exists and that we can use it to react to button events.</p>

<h2 id="the-responder-chain">The Responder Chain</h2>

<p>In iOS, events (for example touch events) are delivered using the
responder chain. The responder chain consists of responder objects
(<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW1">Apples words, not
mine</a>).
If you have a look at the documentation, you may have noticed that <code class="highlighter-rouge">UIView</code> and 
<code class="highlighter-rouge">UIViewController</code> are
responder objects. This means they inherit from <code class="highlighter-rouge">UIResponder</code>:</p>

<p><img src="/assets/UIViewDocumentation.png" alt="" /></p>

<p>When the user taps a view in the view hierarchy, iOS uses hit testing to
figure out which responder object should get the touch event first. The
process starts at the lowest level, the window. Then is propagates up
the view hierarchy and checks for each view if the touch happened within
its bounds. The last view in that process that got hit, receives the
touch event first. If that view does not respond to the touch event, the
event is passed to the next responder in the responder chain. Apple has
a nice example how this works
<a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/event_delivery_responder_chain/event_delivery_responder_chain.html#//apple_ref/doc/uid/TP40009541-CH4-SW4">here</a>.
When a view tells iOS that it did not get hit, the subviews of that view
aren’t checked.</p>

<p>This has an interesting consequence. When a button is outside of the
bounds of its superview but visible because <code class="highlighter-rouge">clipsToBounds</code> of the
superview is set to <code class="highlighter-rouge">false</code>, it does not
receive any touch events. So, when ever a button doesn’t work, remember
to check if it is in the bound of its superview.
<!--more--></p>

<h2 id="target-action">Target-Action</h2>

<p>The target-action mechanism can be set up that is also uses the
responder chain by setting the target to <code class="highlighter-rouge">nil</code>. Then iOS asks
the first responder if it handles the action. If not the first responder
passes the action to the
<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIResponder_Class/index.html#//apple_ref/occ/instm/UIResponder/nextResponder">nextResponder</a>.</p>

<h3 id="an-example">An Example</h3>

<p>Here is an example. Let’s say that we have a view with a button and a
label as a subview of a view controllers view. We could set up the view
controller as the target for the button in <code class="highlighter-rouge">viewDidLoad</code> like this 
<code class="highlighter-rouge">subview.button.addTarget(self, action: "onButtonTap:", forControlEvents: .TouchUpInside)</code>. 
But we can also set the target to <code class="highlighter-rouge">nil</code> and use the
responder chain. Here is the subview with the button and the label:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">ViewWithButtonAndLabel</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">button</span><span class="p">:</span> <span class="kt">UIButton</span>
    <span class="k">let</span> <span class="nv">label</span><span class="p">:</span> <span class="kt">UILabel</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Center</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Touch the button"</span>

        <span class="n">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="kt">System</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"The Button"</span><span class="p">,</span> <span class="nv">forState</span><span class="p">:</span> <span class="o">.</span><span class="kt">Normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="s">"onButtonTap:"</span><span class="p">,</span> <span class="nv">forControlEvents</span><span class="p">:</span> <span class="o">.</span><span class="kt">TouchUpInside</span><span class="p">)</span>
        
        <span class="k">let</span> <span class="nv">stackView</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">label</span><span class="p">,</span> <span class="n">button</span><span class="p">])</span>
        <span class="n">stackView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">stackView</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Vertical</span>
        
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        
        <span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="nf">yellowColor</span><span class="p">()</span>
        
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">stackView</span><span class="p">)</span>
        
        <span class="n">stackView</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraintEqualToAnchor</span><span class="p">(</span><span class="n">centerXAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">active</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="n">stackView</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraintEqualToAnchor</span><span class="p">(</span><span class="n">centerYAnchor</span><span class="p">)</span><span class="o">.</span><span class="n">active</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">}</span>

    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
<span class="p">}</span></code></pre></figure>

<p>The important line is highlighted. The target for action of the button
is set to <code class="highlighter-rouge">nil</code>.
As described above, this means that the action propagates through the
responder chain util a responder object implements the action.</p>

<p>Here is how the view controller looks like:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">viewWithButtonAndLabel</span> <span class="o">=</span> <span class="kt">ViewWithButtonAndLabel</span><span class="p">()</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="nf">whiteColor</span><span class="p">()</span>
        
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">viewWithButtonAndLabel</span><span class="p">)</span>

        <span class="n">viewWithButtonAndLabel</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        
        <span class="k">let</span> <span class="nv">views</span> <span class="o">=</span> <span class="p">[</span><span class="s">"subView"</span><span class="p">:</span> <span class="n">viewWithButtonAndLabel</span><span class="p">]</span>
        <span class="k">var</span> <span class="nv">layoutConstraints</span> <span class="o">=</span> <span class="p">[</span><span class="kt">NSLayoutConstraint</span><span class="p">]()</span>
        <span class="n">layoutConstraints</span> <span class="o">+=</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"|-20-[subView]-20-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="n">views</span><span class="p">)</span>
        <span class="n">layoutConstraints</span> <span class="o">+=</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"V:|-20-[subView]-20-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="n">views</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activateConstraints</span><span class="p">(</span><span class="n">layoutConstraints</span><span class="p">)</span>
        
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">onButtonTap</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">viewWithButtonAndLabel</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">viewWithButtonAndLabel</span><span class="o">.</span><span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">==</span> <span class="s">"Yeah!"</span> <span class="p">?</span> <span class="s">"Touch the button"</span> <span class="p">:</span> <span class="s">"Yeah!"</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Even though, we do not set the target explicitly, the <code class="highlighter-rouge">onButtonTap(_:)</code>
method of the view controller gets called when the button is tapped
because it is the first responder object implementing a method with that
signature.</p>

<p>You can find the example code on
<a href="https://github.com/dasdom/ResponderChainDemo">github</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>The responder chain is your friend. Try to understand it. Read the
documentation. Use it to make your code more powerful.</p>
:ET