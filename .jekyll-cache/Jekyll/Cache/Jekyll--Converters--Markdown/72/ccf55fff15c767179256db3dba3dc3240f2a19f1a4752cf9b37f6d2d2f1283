I"<p>Auto Layout is kind of magic. Like a sorcerer you <strong>tell</strong> the elements
where to position and how to behave. You donâ€™t put the elements to those
positions yourself. The universe moves them because of your spells. Kind
of.</p>

<p>But <strong>when</strong> should the spells be spoken? In other words when not using
Interface Builder, where should the Auto Layout code go?</p>

<p>From the documentation of the <code class="highlighter-rouge">UIView</code> method
<a href="https://developer.apple.com/library/prerelease/ios/documentation/UIKit/Reference/UIView_Class/#//apple_ref/occ/instm/UIView/updateConstraints">updateConstraints</a>:</p>

<blockquote>
  <p>Custom views that set up constraints themselves should do so by
overriding this method.</p>
</blockquote>

<p>Because of this sentence I always thought Apple asks me to put the
layout code in this method. But here is the problem: This method is
called more than once by UIKit and adding the same constraint more than
once is an error. The suggested approach I found in the Internetâ„¢ is to
add a boolean to the view class and set it in <code class="highlighter-rouge">updateConstraints()</code>
to make sure to only run the layout code once.
<!--more--></p>

<p>From the documentation again:</p>

<blockquote>
  <p>When your custom view notes that a change has been made to the view
that invalidates one of its constraints, it should immediately remove
that constraint, and then call setNeedsUpdateConstraints to note that
constraints need to be updated.</p>
</blockquote>

<p>This means <code class="highlighter-rouge">updateConstraints()</code>
is meant to be used in the case then the constraints within a view
change because of some events. For this scenario the name of the method
makes much more sense.</p>

<p>In nearly all of my layouts the constraints are fixed. Sometimes I need
to change the constant of a constraint. This can be done without
removing and re-adding the constraint. (The constant of a <code class="highlighter-rouge">NSLayoutConstraint</code>
is the only thing that can be changed after creation.)</p>

<p>Because of this, I started to put all the layout code in <code class="highlighter-rouge">init(frame:)</code>. But I
was not really comfortable with it because of the documentation
mentioned above.</p>

<p>But then I heard in a session video of the WWDC this year an Apple
engineer suggesting exactly that. And just yesterday I received an
answer to a bug report in which I described the â€˜bugâ€™ that <code class="highlighter-rouge">updateConstraints()</code>
isnâ€™t called. Turns out it wasnâ€™t a bug.</p>

<p>The Apple engineer wrote:</p>

<blockquote>
  <p>In general, if the constraints will only be created once, it should be
done in an initialization method (such as <code class="highlighter-rouge">-init</code> or <code class="highlighter-rouge">-viewDidLoad</code>, and
so forth). Save -updateConstraints for things that are expected to
change over the course of running the App.</p>
</blockquote>

<p>Nice. I love when my feeling about how code should be written is
suggested by Apple.</p>

<p>An example of where I put my layout code can be found
<a href="http://swiftandpainless.com/dont-put-view-code-into-your-view-controller/">here</a>.</p>

<p>Happy layouting!</p>

<p>If you enjoyed this post, then make sure you subscribe to my
<a href="http://swiftandpainless.com/feed">feed</a></p>

<p><strong>Update</strong>: Ole Begemann wrote about <a href="http://oleb.net/blog/2015/08/how-to-use-updateconstraints/">When should you implement
updateConstraints</a>
on his great blog.</p>
:ET