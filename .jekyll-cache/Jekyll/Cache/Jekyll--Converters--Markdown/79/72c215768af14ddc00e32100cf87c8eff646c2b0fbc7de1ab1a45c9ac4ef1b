I"ru<p>Since I read the <a href="https://www.objc.io/issues/1-view-controllers/lighter-view-controllers/">objc.io post about light view
controller</a>,
every few month I come back to the same problem: find the best way to
write a table view controller. I have tried several different approaches
like putting the data source and delegate in a separate class or using
MVVM to populate the cell.</p>

<p>This post is the March 2016 solution to this problem. And as most of the
times, I’m quite happy with the current solution. It uses generics,
protocols and value types.</p>

<p>The main part is the base table view controller. It holds the array to
store the model data, is responsible for registering the cell class and
it implements the needed table view data source methods.</p>

<p>Let’s start with the class declaration:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">TableViewController</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">,</span> <span class="kt">Cell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="k">where</span> <span class="kt">Cell</span><span class="p">:</span> <span class="kt">Configurable</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">UITableViewController</span> <span class="p">{</span>

<span class="p">}</span></code></pre></figure>

<!--more-->

<p>The base table view controller is a generic subclass of <code class="highlighter-rouge">UITableViewController</code>.
The placeholder type name <code class="highlighter-rouge">Cell</code> is of type <code class="highlighter-rouge">UITableViewCell</code> and
conforms to the protocol <code class="highlighter-rouge">Configurable</code>. The
protocol is very simple. It just defines one method:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">protocol</span> <span class="kt">Configurable</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">config</span><span class="p">(</span><span class="n">withItem</span> <span class="nv">item</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>The cell will be registered and dequeued in the <code class="highlighter-rouge">TableViewController</code>.
This means it is enough to have a private property for the cell
identifier:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">private</span> <span class="k">let</span> <span class="nv">cellIdentifier</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="kt">Cell</span><span class="p">)</span></code></pre></figure>

<p>Next we need an array to hold the data to be presented in the table
view:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="p">[</span><span class="kt">T</span><span class="p">]()</span> <span class="p">{</span>
  <span class="k">didSet</span> <span class="p">{</span>
    <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">numberOfRowsInSection</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
      <span class="n">tableView</span><span class="o">.</span><span class="nf">scrollToRowAtIndexPath</span><span class="p">(</span><span class="kt">NSIndexPath</span><span class="p">(</span><span class="nv">forRow</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span><span class="nv">inSection</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
                                       <span class="nv">atScrollPosition</span><span class="p">:</span> <span class="o">.</span><span class="kt">Top</span><span class="p">,</span>
                                       <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Whenever the data is set, <code class="highlighter-rouge">reloadData()</code> of the
table view is called and the table view is scrolled to top. Next, we
define an init method:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="nf">init</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">}</span></code></pre></figure>

<p>In <code class="highlighter-rouge">viewDidLoad()</code> we set up the table view:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
  <span class="n">tableView</span><span class="o">.</span><span class="nf">registerClass</span><span class="p">(</span><span class="kt">Cell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="n">cellIdentifier</span><span class="p">)</span>
  <span class="n">tableView</span><span class="o">.</span><span class="n">rowHeight</span> <span class="o">=</span> <span class="kt">UITableViewAutomaticDimension</span>
  <span class="n">tableView</span><span class="o">.</span><span class="n">estimatedRowHeight</span> <span class="o">=</span> <span class="mi">60</span>
<span class="p">}</span></code></pre></figure>

<p>What’s left is to provide the required method if <code class="highlighter-rouge">UITableViewDataSource</code>:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">override</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">data</span><span class="o">.</span><span class="n">count</span>
<span class="p">}</span>

<span class="k">override</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span>
                        <span class="n">cellForRowAtIndexPath</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="n">cellIdentifier</span><span class="p">,</span>
                                                         <span class="nv">forIndexPath</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as!</span> <span class="kt">Cell</span>
  <span class="n">cell</span><span class="o">.</span><span class="nf">config</span><span class="p">(</span><span class="nv">withItem</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">])</span>
  <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span></code></pre></figure>

<p>The only interesting part of these methods is the line 
<code class="highlighter-rouge">cell.config(withItem: data[indexPath.row])</code>. This means the cell is responsible to
fill it’s labels or what ever the cell uses to present the data.</p>

<p>Here is the complete base table view controller class:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">TableViewController</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">,</span> <span class="kt">Cell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="k">where</span> <span class="kt">Cell</span><span class="p">:</span> <span class="kt">Configurable</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">UITableViewController</span> <span class="p">{</span>
  
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">cellIdentifier</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="kt">Cell</span><span class="p">)</span>
  <span class="k">var</span> <span class="nv">data</span> <span class="o">=</span> <span class="p">[</span><span class="kt">T</span><span class="p">]()</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
      <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
      <span class="k">if</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">numberOfRowsInSection</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">scrollToRowAtIndexPath</span><span class="p">(</span><span class="kt">NSIndexPath</span><span class="p">(</span><span class="nv">forRow</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span><span class="nv">inSection</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
                                         <span class="nv">atScrollPosition</span><span class="p">:</span> <span class="o">.</span><span class="kt">Top</span><span class="p">,</span>
                                         <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nf">init</span><span class="p">()</span> <span class="p">{</span> <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="n">tableView</span><span class="o">.</span><span class="nf">registerClass</span><span class="p">(</span><span class="kt">Cell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="n">cellIdentifier</span><span class="p">)</span>
    <span class="n">tableView</span><span class="o">.</span><span class="n">rowHeight</span> <span class="o">=</span> <span class="kt">UITableViewAutomaticDimension</span>
    <span class="n">tableView</span><span class="o">.</span><span class="n">estimatedRowHeight</span> <span class="o">=</span> <span class="mi">60</span>
  <span class="p">}</span>
  
  <span class="c1">// MARK: - Table view data source</span>
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">data</span><span class="o">.</span><span class="n">count</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span>
                          <span class="n">cellForRowAtIndexPath</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="n">cellIdentifier</span><span class="p">,</span>
                                                           <span class="nv">forIndexPath</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as!</span> <span class="kt">Cell</span>
    <span class="n">cell</span><span class="o">.</span><span class="nf">config</span><span class="p">(</span><span class="nv">withItem</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">cell</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We can use this base class to define a table view controller that let’s
the user put in a string and search on Github for matching users:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">UserSearchTableViewController</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kd">protocol</span><span class="o">&lt;</span><span class="kt">DictCreatable</span><span class="p">,</span> <span class="kt">LabelsPresentable</span><span class="p">,</span> <span class="kt">UserProtocol</span><span class="o">&gt;&gt;</span><span class="p">:</span> <span class="kt">TableViewController</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">,</span> <span class="kt">TwoLabelCell</span><span class="o">&gt;</span><span class="p">,</span> <span class="kt">UISearchBarDelegate</span> <span class="p">{</span>

  <span class="k">var</span> <span class="nv">searchString</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
      <span class="k">guard</span> <span class="k">let</span> <span class="nv">searchString</span> <span class="o">=</span> <span class="n">searchString</span> <span class="k">where</span> <span class="n">searchString</span><span class="o">.</span><span class="n">characters</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
      <span class="k">let</span> <span class="nv">fetch</span> <span class="o">=</span> <span class="kt">APIClient</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">()</span><span class="o">.</span><span class="nf">fetchUsers</span><span class="p">(</span><span class="nv">forSearchString</span><span class="p">:</span> <span class="n">searchString</span><span class="p">)</span>
      <span class="n">fetch</span> <span class="p">{</span> <span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">theItems</span> <span class="o">=</span> <span class="n">items</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="k">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">theItems</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span> <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    
    <span class="n">title</span> <span class="o">=</span> <span class="s">"User"</span>
    
    <span class="k">let</span> <span class="nv">searchBar</span> <span class="o">=</span> <span class="kt">UISearchBar</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">40</span><span class="p">))</span>
    <span class="n">searchBar</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="s">"Github username"</span>
    <span class="n">searchBar</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="n">tableView</span><span class="o">.</span><span class="n">tableHeaderView</span> <span class="o">=</span> <span class="n">searchBar</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">searchBarSearchButtonClicked</span><span class="p">(</span><span class="nv">searchBar</span><span class="p">:</span> <span class="kt">UISearchBar</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">searchBar</span><span class="o">.</span><span class="nf">resignFirstResponder</span><span class="p">()</span>
    <span class="n">searchString</span> <span class="o">=</span> <span class="n">searchBar</span><span class="o">.</span><span class="n">text</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAtIndexPath</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">NSIndexPath</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">next</span> <span class="o">=</span> <span class="kt">RepositoriesTableViewController</span><span class="o">&lt;</span><span class="kt">Repository</span><span class="o">&gt;</span><span class="p">()</span>
    <span class="n">next</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span><span class="o">.</span><span class="n">name</span>
    <span class="n">navigationController</span><span class="p">?</span><span class="o">.</span><span class="nf">pushViewController</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>That is a complete table view controller. Most of the code is for the
presentation and handling of the searchBar. Neat, isn’t it?</p>

<p>With all this, an instance of <code class="highlighter-rouge">UserSearchTableViewController</code>
can be initialized like this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">viewController</span> <span class="o">=</span> <span class="kt">UserSearchTableViewController</span><span class="o">&lt;</span><span class="kt">User</span><span class="o">&gt;</span><span class="p">()</span></code></pre></figure>

<p>For completeness, here is a possible version of <code class="highlighter-rouge">TwoLabelCell</code>:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">TwoLabelCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="p">,</span> <span class="kt">Configurable</span> <span class="p">{</span>

  <span class="k">let</span> <span class="nv">nameLabel</span><span class="p">:</span> <span class="kt">UILabel</span>
  <span class="k">let</span> <span class="nv">descriptionLabel</span><span class="p">:</span> <span class="kt">UILabel</span>
  
  <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="kt">UITableViewCellStyle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
    <span class="n">nameLabel</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
    <span class="n">nameLabel</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">preferredFontForTextStyle</span><span class="p">(</span><span class="kt">UIFontTextStyleHeadline</span><span class="p">)</span>
    
    <span class="n">descriptionLabel</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
    <span class="n">descriptionLabel</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">preferredFontForTextStyle</span><span class="p">(</span><span class="kt">UIFontTextStyleSubheadline</span><span class="p">)</span>
    <span class="n">descriptionLabel</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">2</span>
    
    <span class="k">let</span> <span class="nv">stackView</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">nameLabel</span><span class="p">,</span> <span class="n">descriptionLabel</span><span class="p">])</span>
    <span class="n">stackView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">stackView</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Vertical</span>
    
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="n">reuseIdentifier</span><span class="p">)</span>
    
    <span class="nf">addSubview</span><span class="p">(</span><span class="n">stackView</span><span class="p">)</span>
    
    <span class="k">let</span> <span class="nv">views</span> <span class="o">=</span> <span class="p">[</span><span class="s">"stackView"</span><span class="p">:</span> <span class="n">stackView</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">layoutConstraints</span> <span class="o">=</span> <span class="p">[</span><span class="kt">NSLayoutConstraint</span><span class="p">]()</span>
    <span class="n">layoutConstraints</span> <span class="o">+=</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"|-[stackView]-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="n">views</span><span class="p">)</span>
    <span class="n">layoutConstraints</span> <span class="o">+=</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"V:|-[stackView]-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="n">views</span><span class="p">)</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activateConstraints</span><span class="p">(</span><span class="n">layoutConstraints</span><span class="p">)</span>
  <span class="p">}</span>
  
  <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">config</span><span class="p">(</span><span class="n">withItem</span> <span class="nv">item</span><span class="p">:</span> <span class="kt">Any</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">item</span> <span class="o">=</span> <span class="n">item</span> <span class="k">as?</span> <span class="kt">LabelsPresentable</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="k">let</span> <span class="nv">texts</span> <span class="o">=</span> <span class="n">item</span><span class="o">.</span><span class="n">texts</span>
    <span class="k">if</span> <span class="n">texts</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
      <span class="n">nameLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">texts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">texts</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">texts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">characters</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
      <span class="n">descriptionLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">texts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>You can find the code and another table view controller using the same
structure on <a href="https://github.com/dasdom/TableViewMarch2016">Github</a>.</p>

<p>Update April 1st 2016: Improved the code after a discussion about it in
the Swiftde-Slack group.</p>
:ET