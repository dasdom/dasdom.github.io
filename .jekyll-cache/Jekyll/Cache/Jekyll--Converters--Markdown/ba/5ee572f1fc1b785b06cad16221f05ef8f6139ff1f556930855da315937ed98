I"ã!<p>Two month ago I published a post about <a href="http://swiftandpainless.com/how-to-test-uialertcontroller-in-swift/">How To Test
UIAlertController</a>.
A reader found out that the test doesnâ€™t work as I expected:</p>

<blockquote>
  <p><a href="https://twitter.com/dasdom">@dasdom</a> Your tests work, but ur
convienience init in MockUIAction is never triggered - u canâ€™t
override convienience inits. Seems an ios bug</p>

  <p>â€” Larhythimx (@Larhythmix) <a href="https://twitter.com/Larhythmix/status/669456137041915905">25. November
2015</a></p>
</blockquote>

<p>Larhythimx is totally right. The init method of the mock is never
called. The reason why I didnâ€™t see this when I wrote the test is, that
the handler is actually called. It looks like the real <code class="highlighter-rouge">UIAlertAction</code> does
use handler as the hidden internal variable to store the handler closure
of the action. This is fragil and Larhythimx mentions in another tweet
that the handler is nil in test he tries to write.
<!--more--></p>

<p>So as the golden way (i.e. write tests without changing the
implementation) does not work here, letâ€™s go for silver.</p>

<p>First we add a class method to <code class="highlighter-rouge">UIAlertAction</code> that
creates actions. Add the following extension in <code class="highlighter-rouge">ViewController.swift</code>
:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">extension</span> <span class="kt">UIAlertAction</span> <span class="p">{</span>
  <span class="kd">class</span> <span class="kd">func</span> <span class="nf">makeActionWithTitle</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span><span class="p">?,</span> <span class="nv">style</span><span class="p">:</span> <span class="kt">UIAlertActionStyle</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">((</span><span class="kt">UIAlertAction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?)</span> <span class="o">-&gt;</span> <span class="kt">UIAlertAction</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="n">handler</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>In the <code class="highlighter-rouge">MockAlertAction</code> add
this override:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">override</span> <span class="kd">class</span> <span class="kd">func</span> <span class="nf">makeActionWithTitle</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span><span class="p">?,</span> <span class="nv">style</span><span class="p">:</span> <span class="kt">UIAlertActionStyle</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">((</span><span class="kt">UIAlertAction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?)</span> <span class="o">-&gt;</span> <span class="kt">MockAlertAction</span> <span class="p">{</span>
  <span class="k">return</span> <span class="kt">MockAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="n">handler</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>In the implementation code we can now use the class methods to create
the alert actions:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">let</span> <span class="nv">okAction</span> <span class="o">=</span> <span class="kt">Action</span><span class="o">.</span><span class="nf">makeActionWithTitle</span><span class="p">(</span><span class="s">"OK"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="kt">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
    <span class="k">self</span><span class="o">.</span><span class="n">actionString</span> <span class="o">=</span> <span class="s">"OK"</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">cancelAction</span> <span class="o">=</span> <span class="kt">Action</span><span class="o">.</span><span class="nf">makeActionWithTitle</span><span class="p">(</span><span class="s">"Cancel"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="kt">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
    <span class="k">self</span><span class="o">.</span><span class="n">actionString</span> <span class="o">=</span> <span class="s">"Cancel"</span>
<span class="p">}</span>
<span class="n">alertViewController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span></code></pre></figure>

<p>To make sure we do really test, what we think we do test, rename the
<code class="highlighter-rouge">handler</code> property in <code class="highlighter-rouge">MockAlertAction</code> to
mockHandler:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="nv">mockHandler</span><span class="p">:</span> <span class="kt">Handler</span><span class="p">?</span></code></pre></figure>

<p>In addition we add tests for the mock title of the actions. The test for
the cancel action then looks like this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testAlert_FirstActionStoresCancel</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">sut</span><span class="o">.</span><span class="kt">Action</span> <span class="o">=</span> <span class="kt">MockAlertAction</span><span class="o">.</span><span class="k">self</span>
  
  <span class="n">sut</span><span class="o">.</span><span class="nf">showAlert</span><span class="p">(</span><span class="kt">UIButton</span><span class="p">())</span>
  
  <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="n">presentedViewController</span> <span class="k">as!</span> <span class="kt">UIAlertController</span>
  <span class="k">let</span> <span class="nv">action</span> <span class="o">=</span> <span class="n">alertController</span><span class="o">.</span><span class="n">actions</span><span class="o">.</span><span class="n">first</span> <span class="k">as!</span> <span class="kt">MockAlertAction</span>
  <span class="n">action</span><span class="o">.</span><span class="nf">mockHandler</span><span class="o">!</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
  
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">sut</span><span class="o">.</span><span class="n">actionString</span><span class="p">,</span> <span class="s">"Cancel"</span><span class="p">)</span>
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">action</span><span class="o">.</span><span class="n">mockTitle</span><span class="p">,</span> <span class="s">"Cancel"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>This test would have failed in the previous version because as the init
method got never called the mock title did not get set.</p>

<p>You can find the corrected version on
<a href="https://github.com/dasdom/TestingAlertExperiment">github</a>.</p>

<p>Thanks again Larhythimx for the tweet!</p>
:ET