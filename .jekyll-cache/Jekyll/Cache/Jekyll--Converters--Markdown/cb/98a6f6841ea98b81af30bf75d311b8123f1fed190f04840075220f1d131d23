I"GE<p><strong>Update Nov. 25th 2015: This kind of testing does not work. You can
find the correct version
<a href="http://swiftandpainless.com/correction-on-testing-uialertcontroller/">here</a>.</strong></p>

<p>Recently I read a <a href="http://qualitycoding.org/testing-uialertcontrollers/">blog
post</a> about
testing <code class="highlighter-rouge">UIAlertController</code> in
Objective-C using control swizzling. Posts like this always trigger me
to find a way to test the same without the swizzling. I know that
swizzling is a powerful tool developers should have access to in their
developer tool box. But I personally avoid it when ever I can. In fact
only one app I worked on in the last six years used swizzling. And today
I believe we could have implemented it without it.</p>

<p>So how to test <code class="highlighter-rouge">UIAlertController</code> in
Swift without the swizzling?
<!--more--></p>

<p>Let’s start with the code we want to test. I have added a button to the
storyboard. (I’m using a storyboard here to make this post accessible to
people who don’t wan’t to do their UI in code.) When the button is
tapped an alert is shown with a title, a message and two buttons, OK and
Cancel. Here is the code:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
  
  <span class="k">var</span> <span class="nv">actionString</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
  
  <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">showAlert</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">alertViewController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"Test Title"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"Message"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="kt">Alert</span><span class="p">)</span>
    
    <span class="k">let</span> <span class="nv">okAction</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"OK"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="kt">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
      <span class="k">self</span><span class="o">.</span><span class="n">actionString</span> <span class="o">=</span> <span class="s">"OK"</span>
    <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">cancelAction</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"Cancel"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="kt">Cancel</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
      <span class="k">self</span><span class="o">.</span><span class="n">actionString</span> <span class="o">=</span> <span class="s">"Cancel"</span>
    <span class="p">}</span>
    
    <span class="n">alertViewController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span>
    <span class="n">alertViewController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
    
    <span class="nf">presentViewController</span><span class="p">(</span><span class="n">alertViewController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Note that the alert actions don’t do anything interesting in this
example. They just represent a change a unit test could verify.</p>

<p>Let’s start with an easy test: Test the title and the message of the
alert controller.</p>

<p>The setup code for the tests looks like this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">XCTest</span>
<span class="kd">@testable</span> <span class="kd">import</span> <span class="kt">TestingAlertExperiment</span>

<span class="kd">class</span> <span class="kt">TestingAlertExperimentTests</span><span class="p">:</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
  
  <span class="k">var</span> <span class="nv">sut</span><span class="p">:</span> <span class="kt">ViewController</span><span class="o">!</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">setUp</span><span class="p">()</span>
  
    <span class="n">sut</span> <span class="o">=</span> <span class="kt">UIStoryboard</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Main"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span><span class="o">.</span><span class="nf">instantiateInitialViewController</span><span class="p">()</span> <span class="k">as!</span> <span class="kt">ViewController</span>
    
    <span class="kt">UIApplication</span><span class="o">.</span><span class="nf">sharedApplication</span><span class="p">()</span><span class="o">.</span><span class="n">keyWindow</span><span class="p">?</span><span class="o">.</span><span class="n">rootViewController</span> <span class="o">=</span> <span class="n">sut</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">tearDown</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Put teardown code here. This method is called after the invocation of each test method in the class.</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">tearDown</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We need to set the sut to the rootViewController otherwise the view
controller can’t present the alert view controller.</p>

<p>Add the following test for the title of a UIAlertController:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testAlert_HasTitle</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">sut</span><span class="o">.</span><span class="nf">showAlert</span><span class="p">(</span><span class="kt">UIButton</span><span class="p">())</span>
    
  <span class="kt">XCTAssertTrue</span><span class="p">(</span><span class="n">sut</span><span class="o">.</span><span class="n">presentedViewController</span> <span class="k">is</span> <span class="kt">UIAlertController</span><span class="p">)</span>
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">sut</span><span class="o">.</span><span class="n">presentedViewController</span><span class="p">?</span><span class="o">.</span><span class="n">title</span><span class="p">,</span> <span class="s">"Test Title"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>That was easy. Now let’s test the cancel button of the
UIAlertController. The problem: The handler block of the alert action
can’t be accessed. Therefore we need a mock alert action to store the
handler to be able to call it in the test to see if the action does what
we expect. Add the following mock class within the test case:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">class</span> <span class="kt">MockAlertAction</span> <span class="p">:</span> <span class="kt">UIAlertAction</span> <span class="p">{</span>
  
  <span class="kd">typealias</span> <span class="kt">Handler</span> <span class="o">=</span> <span class="p">((</span><span class="kt">UIAlertAction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span>
  <span class="k">var</span> <span class="nv">handler</span><span class="p">:</span> <span class="kt">Handler</span><span class="p">?</span>
  <span class="k">var</span> <span class="nv">mockTitle</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
  <span class="k">var</span> <span class="nv">mockStyle</span><span class="p">:</span> <span class="kt">UIAlertActionStyle</span>
  
  <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span><span class="p">?,</span> <span class="nv">style</span><span class="p">:</span> <span class="kt">UIAlertActionStyle</span><span class="p">,</span> <span class="nv">handler</span><span class="p">:</span> <span class="p">((</span><span class="kt">UIAlertAction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    
    <span class="n">mockTitle</span> <span class="o">=</span> <span class="n">title</span>
    <span class="n">mockStyle</span> <span class="o">=</span> <span class="n">style</span>
    <span class="k">self</span><span class="o">.</span><span class="n">handler</span> <span class="o">=</span> <span class="n">handler</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mockStyle</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Default</span>
    
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The primary job of the mock class is to capture the handler for later
use. Now we need to inject the mock class into the implementation code.
Replace the view controller code with the following:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
  
  <span class="k">var</span> <span class="nv">Action</span> <span class="o">=</span> <span class="kt">UIAlertAction</span><span class="o">.</span><span class="k">self</span>
  <span class="k">var</span> <span class="nv">actionString</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
  
  <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">showAlert</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">alertViewController</span> <span class="o">=</span> <span class="kt">UIAlertController</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"Test Title"</span><span class="p">,</span> <span class="nv">message</span><span class="p">:</span> <span class="s">"Message"</span><span class="p">,</span> <span class="nv">preferredStyle</span><span class="p">:</span> <span class="o">.</span><span class="kt">Alert</span><span class="p">)</span>
    
    <span class="k">let</span> <span class="nv">okAction</span> <span class="o">=</span> <span class="kt">Action</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"OK"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="kt">Default</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
      <span class="k">self</span><span class="o">.</span><span class="n">actionString</span> <span class="o">=</span> <span class="s">"OK"</span>
    <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">cancelAction</span> <span class="o">=</span> <span class="kt">Action</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"Cancel"</span><span class="p">,</span> <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="kt">Cancel</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
      <span class="k">self</span><span class="o">.</span><span class="n">actionString</span> <span class="o">=</span> <span class="s">"Cancel"</span>
    <span class="p">}</span>
    
    <span class="n">alertViewController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">cancelAction</span><span class="p">)</span>
    <span class="n">alertViewController</span><span class="o">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">okAction</span><span class="p">)</span>
    
    <span class="nf">presentViewController</span><span class="p">(</span><span class="n">alertViewController</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We have added a class variable <code class="highlighter-rouge">Action</code> which is set
to <code class="highlighter-rouge">UIAlertAction.self</code>.
This variable is used when we initialize the alert actions. This enables
us to overwrite it in the test. Let’s do it:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testAlert_FirstActionStoresCancel</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">sut</span><span class="o">.</span><span class="kt">Action</span> <span class="o">=</span> <span class="kt">MockAlertAction</span><span class="o">.</span><span class="k">self</span>
  
  <span class="n">sut</span><span class="o">.</span><span class="nf">showAlert</span><span class="p">(</span><span class="kt">UIButton</span><span class="p">())</span>
  <span class="k">let</span> <span class="nv">alertController</span> <span class="o">=</span> <span class="n">sut</span><span class="o">.</span><span class="n">presentedViewController</span> <span class="k">as!</span> <span class="kt">UIAlertController</span>
  <span class="k">let</span> <span class="nv">action</span> <span class="o">=</span> <span class="n">alertController</span><span class="o">.</span><span class="n">actions</span><span class="o">.</span><span class="n">first</span> <span class="k">as!</span> <span class="kt">MockAlertAction</span>
  <span class="n">action</span><span class="o">.</span><span class="nf">handler</span><span class="o">!</span><span class="p">(</span><span class="n">action</span><span class="p">)</span>
  
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">sut</span><span class="o">.</span><span class="n">actionString</span><span class="p">,</span> <span class="s">"Cancel"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>First we inject the mock alert action. Then we call the code that
presents the alert view controller. We get the cancel action from the
presented view controller and call the captured handler. The last step
is to assert that the action actually does what we expect.</p>

<p>That’s it. A very easy way to test an <code class="highlighter-rouge">UIAlertViewController</code> without the
swizzling.</p>

<p><strong>Update Nov. 25th 2015: This kind of testing does not work. You can
find the correct version
<a href="http://swiftandpainless.com/correction-on-testing-uialertcontroller/">here</a>.</strong></p>
:ET