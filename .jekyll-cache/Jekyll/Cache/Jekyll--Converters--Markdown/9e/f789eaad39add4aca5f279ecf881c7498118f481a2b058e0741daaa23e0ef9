I"‚:<p>Before we start with the real app, we need to get a feeling about building user interfaces in code. We are going to build a simple counter app showing two labels and two buttons. It will look like this:</p>

<p><img src="../assets/2018-09-24/01.png" alt="" /></p>

<p>Donâ€™t worry, itâ€™s easier than you might think.</p>

<p>In fact we already changed the user interface in code in the last post. We set the <code class="highlighter-rouge">backgroundColor</code> of the view in <code class="highlighter-rouge">viewDidLoad()</code>. As the name suggests, <code class="highlighter-rouge">viewDidLoad()</code> is called after the view did load but before it is rendered on screen. So, when building the user interface (UI) in code, are we supposed to put all the UI code into this method?</p>

<p>In documentation of <code class="highlighter-rouge">viewDidLoad()</code> we find this:</p>

<blockquote>
  <p>This method is called after the view controller has loaded its view hierarchy into memory. This method is called regardless of whether the view hierarchy was loaded from a nib file or created programmatically in the <code class="highlighter-rouge">loadView()</code> method. You usually override this method to perform additional initialization on views that were loaded from nib files.</p>
</blockquote>

<p>So this method is used to perform additional initialisation in case the user interface is loaded from nibs (i.e. when the UI is build in Interface Builder). This make sense because some properties cannot be set using Interface Builder.</p>

<p>But we are going to do all UI in code. We need to put our code somewhere else. The docs for <code class="highlighter-rouge">viewDidLoad()</code> already tell us where the code belongs: <code class="highlighter-rouge">loadView()</code>. In the docs for <code class="highlighter-rouge">loadView()</code> we find:</p>

<blockquote>
  <p>You can override this method in order to create your views manually. If you choose to do so, assign the root view of your view hierarchy to the view property. [â€¦] Your custom implementation of this method should not call super.</p>
</blockquote>

<p>So we could create an instance of <code class="highlighter-rouge">UIView</code>, add subviews and assign it to the view property. But this way, we would put view code into the view controller. View code belongs into its own class. The view code should be separated from the view controller to make it reusable in other places of the app. We need a new class; a subclass of <code class="highlighter-rouge">UIView</code>.</p>

<p>In the project we created in the last post, add a new class using the Cocoa Touch Class template. Make it a subclass of <code class="highlighter-rouge">UIView</code> and call it <code class="highlighter-rouge">CounterView</code>.</p>

<p><img src="../assets/2018-09-24/02.png" alt="" /></p>

<p>The view is going to show two labels and two buttons. We add those as properties to the view class.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CounterView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">labelOne</span><span class="p">:</span> <span class="kt">UILabel</span>
  <span class="k">let</span> <span class="nv">labelTwo</span><span class="p">:</span> <span class="kt">UILabel</span>
  <span class="k">let</span> <span class="nv">buttonOne</span><span class="p">:</span> <span class="kt">UIButton</span>
  <span class="k">let</span> <span class="nv">buttonTwo</span><span class="p">:</span> <span class="kt">UIButton</span>
<span class="p">}</span>
</code></pre></div></div>

<p>These properties are set in the initialiser of that view.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="n">labelOne</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
    <span class="n">labelOne</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">labelOne</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
    <span class="n">labelOne</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"0"</span>
    
    <span class="n">labelTwo</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
    <span class="n">labelTwo</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">labelTwo</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
    <span class="n">labelTwo</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"0"</span>
    
    <span class="n">buttonOne</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
    <span class="n">buttonOne</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">buttonOne</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"Player One"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
    <span class="n">buttonOne</span><span class="o">.</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">1</span>
    
    <span class="n">buttonTwo</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
    <span class="n">buttonTwo</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">buttonTwo</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"Player Two"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
    <span class="n">buttonTwo</span><span class="o">.</span><span class="n">tag</span> <span class="o">=</span> <span class="mi">2</span>
    
    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Before there was Auto Layout, views had to be positioned on screen using screen coordinates. In addition they had auto resizing masks to describe how the view size should react when the size of the superview (= the view containing the view) changed. For example one could tell UIKit that the view should keep the distances to the edges of the superview constant.</p>

<p>When Auto Layout was introduced Apple decided that auto resizing masks would be translated into constraints automatically. This way, the UI looked the same even though the layout engine had been changed. Clever!</p>

<p>When using Auto Layout, you usually donâ€™t want to add constraints based on auto resizing masks. Usually you want to add all constraints yourself. There is a property on <code class="highlighter-rouge">UIView</code> to disable the translation of the auto resizing masks, <code class="highlighter-rouge">translatesAutoresizingMaskIntoConstraints</code>. The Interface Builder sets this property to <code class="highlighter-rouge">false</code> when you add a constraint to a view.</p>

<p>We have to do the same. In the code above for all the subviews to be added to the view <code class="highlighter-rouge">translatesAutoresizingMaskIntoConstraints</code> is set to <code class="highlighter-rouge">false</code>.</p>

<p>Next the labels and buttons are added as subviews to the view.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">addSubview</span><span class="p">(</span><span class="n">labelOne</span><span class="p">)</span>
    <span class="nf">addSubview</span><span class="p">(</span><span class="n">labelTwo</span><span class="p">)</span>
    
    <span class="nf">addSubview</span><span class="p">(</span><span class="n">buttonOne</span><span class="p">)</span>
    <span class="nf">addSubview</span><span class="p">(</span><span class="n">buttonTwo</span><span class="p">)</span>
</code></pre></div></div>

<p>To position the views on screen, we need Auto Layout Constraints. At this point you donâ€™t need to understand how they work. Type them word by word as they are written here. Later in the book it will become clear how they work.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
      <span class="n">labelOne</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
      
      <span class="n">labelTwo</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">labelOne</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
      <span class="n">labelTwo</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">),</span>
      <span class="n">labelTwo</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">labelOne</span><span class="o">.</span><span class="n">widthAnchor</span><span class="p">),</span>
      <span class="n">labelTwo</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">labelOne</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
    
      <span class="n">buttonOne</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">labelOne</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
      <span class="n">buttonOne</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">labelOne</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span><span class="mi">20</span><span class="p">),</span>
      
      <span class="n">buttonTwo</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">labelTwo</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
      <span class="n">buttonTwo</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">buttonOne</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
      
      <span class="n">buttonOne</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span>
        <span class="nv">equalTo</span><span class="p">:</span> <span class="n">centerYAnchor</span><span class="p">),</span>
      <span class="p">])</span>
</code></pre></div></div>

<p>We are nearly finished with the view code. But in Swift if you subclass a class you need to override all required initialiser. <code class="highlighter-rouge">UIView</code> has one required initialisers <code class="highlighter-rouge">init(coder:)</code>, which is used by UIKit when the view is loaded from an archive (like a nib). In our little app <code class="highlighter-rouge">init(coder:)</code> will never be called. In this case itâ€™s ok to trap in a fatal error.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Thatâ€™s it for the view code.</p>

<p>If you have any feedback please ping be on <a href="https://twitter.com/dasdom">Twitter</a>.</p>
:ET