I"l)<p>Since I wrote the table view data source code in Part 8, I have
experimented with table views and table view cells a lot. And I found a
way of setting the data in the cell that I like more now. Most probably
that will change in the future. That is the point of being a developer.
Code I write today will probably scare me in half a year. I fear the day
when this stops. Change of preferences is a good thing. Without it I’d
have stopped improving.
<!--more--></p>

<p>Before we improve the setting of the cell data, let’s first improve the
code of <code class="highlighter-rouge">progressUntilBirthday(_:)</code>.
The method has a few problems. First, the return type is optional. What
does a nil progress mean? It would be nil, if <code class="highlighter-rouge">todayComponents</code>
would be nil. That should not happen. We set <code class="highlighter-rouge">todayComponents</code> in
<code class="highlighter-rouge">didSet</code> of the <code class="highlighter-rouge">today</code>
property. And that is set in <code class="highlighter-rouge">viewWillAppear</code> of
<code class="highlighter-rouge">BirthdaysListViewController</code>.</p>

<p>A better version would look like this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">progressUntilBirthday</span><span class="p">(</span><span class="nv">birthday</span><span class="p">:</span> <span class="kt">Birthday</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Float</span> <span class="p">{</span>
  
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">todayComponents</span> <span class="o">=</span> <span class="n">todayComponents</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mf">0.0</span> <span class="p">}</span>

  <span class="k">let</span> <span class="nv">calculationComponents</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">.</span><span class="n">birthday</span><span class="o">.</span><span class="nf">copy</span><span class="p">()</span> <span class="k">as!</span> <span class="kt">NSDateComponents</span>
  <span class="n">calculationComponents</span><span class="o">.</span><span class="n">year</span> <span class="o">=</span> <span class="n">todayComponents</span><span class="o">.</span><span class="n">year</span>
  
  <span class="k">if</span> <span class="n">calculationComponents</span><span class="o">.</span><span class="n">month</span> <span class="o">&lt;</span> <span class="n">todayComponents</span><span class="o">.</span><span class="n">month</span> <span class="o">||</span>
    <span class="p">(</span><span class="n">calculationComponents</span><span class="o">.</span><span class="n">month</span> <span class="o">==</span> <span class="n">todayComponents</span><span class="o">.</span><span class="n">month</span> <span class="o">&amp;&amp;</span>
      <span class="n">calculationComponents</span><span class="o">.</span><span class="n">day</span> <span class="o">&lt;</span> <span class="n">todayComponents</span><span class="o">.</span><span class="n">day</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="n">calculationComponents</span><span class="o">.</span><span class="n">year</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1">// Swift 3 compliant ...</span>
  <span class="p">}</span>
  
  <span class="k">let</span> <span class="nv">components</span> <span class="o">=</span> <span class="n">gregorian</span><span class="p">?</span><span class="o">.</span><span class="nf">components</span><span class="p">([</span><span class="o">.</span><span class="kt">Day</span><span class="p">],</span>
                                         <span class="nv">fromDateComponents</span><span class="p">:</span> <span class="n">todayComponents</span><span class="p">,</span>
                                         <span class="nv">toDateComponents</span><span class="p">:</span> <span class="n">calculationComponents</span><span class="p">,</span>
                                         <span class="nv">options</span><span class="p">:</span> <span class="p">[])</span>
  
  <span class="k">return</span> <span class="mf">1.0</span><span class="o">-</span><span class="kt">Float</span><span class="p">(</span><span class="n">components</span><span class="o">!.</span><span class="n">day</span><span class="p">)</span><span class="o">/</span><span class="kt">Float</span><span class="p">(</span><span class="mi">365</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Much better. Here we use guard to unwrap the <code class="highlighter-rouge">todayComponents</code> and
if this unexpectedly fails, we return a progress on <code class="highlighter-rouge">0.0</code>. In this case,
the user would just see the info in the cell without the progress. That
would result in the same behavior as the version before.</p>

<p>Now let us improve the setting of the data to be shown in the cell.
Replace <code class="highlighter-rouge">tableView(_:cellForRowAtIndexPath)</code>
with this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAtIndexPath</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCellWithIdentifier</span><span class="p">(</span><span class="n">cellIdentifer</span><span class="p">,</span> <span class="nv">forIndexPath</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as!</span> <span class="kt">BirthdayCell</span>
  
  <span class="k">let</span> <span class="nv">birthday</span> <span class="o">=</span> <span class="n">birthdays</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
  <span class="n">cell</span><span class="o">.</span><span class="nf">updateWithItem</span><span class="p">(</span><span class="n">birthday</span><span class="p">,</span> <span class="nv">progress</span><span class="p">:</span> <span class="nf">progressUntilBirthday</span><span class="p">(</span><span class="n">birthday</span><span class="p">))</span>
  
  <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span></code></pre></figure>

<p>The compiler complains the <code class="highlighter-rouge">BirthdayCell</code> doesn’t
have a method <code class="highlighter-rouge">updateWithItem(_:progress:)</code>.
Let’s change that. Add the following code to BirthdayCell:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="n">updateWithItem</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">item</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> <span class="nv">progress</span><span class="p">:</span> <span class="kt">Float</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="n">item</span> <span class="k">is</span> <span class="kt">Birthday</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">birthday</span> <span class="o">=</span> <span class="n">item</span> <span class="k">as!</span> <span class="kt">Birthday</span>
    <span class="n">nameLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">.</span><span class="n">firstName</span>
    <span class="n">patternNameLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">birthday</span><span class="o">.</span><span class="n">firstName</span>
    <span class="n">birthdayLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">birthday</span><span class="o">.</span><span class="n">birthday</span><span class="o">.</span><span class="n">day</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">birthday</span><span class="o">.</span><span class="n">birthday</span><span class="o">.</span><span class="n">month</span><span class="se">)</span><span class="s">"</span>

    <span class="n">patternWidthConstraint</span><span class="p">?</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span><span class="o">*</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">width</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This makes the cell responsible to update its UI. I find this pattern
much better than letting the controller or the data provider update the
label and the progress. But keep in mind that with this change, the view
and the model are more coupled than they have been before. The cell now
knows that there is something like a birthday. But it already knew that
in some way. The UI was designed to show the information of a birthday
instance.</p>

<p>If you have difficulties to accept that design, you can add a protocol
(like <code class="highlighter-rouge">BirthdayCellPresentable</code>)
and let <code class="highlighter-rouge">Birthday</code> conform to
that protocol.</p>

<p>Another thing to note is, we have implemented <code class="highlighter-rouge">updateWithItem(_:progress:)</code>
as a generic method. But in this case this doesn’t help much. We could
have used the type <code class="highlighter-rouge">Any</code> instead.</p>

<p>Sure there is still code that could be improved. But that has to wait
for some of the next posts in this series. Stay tuned.</p>

<p>As always, find the code at
<a href="https://github.com/dasdom/Birthdays/tree/9">github</a>.</p>
:ET