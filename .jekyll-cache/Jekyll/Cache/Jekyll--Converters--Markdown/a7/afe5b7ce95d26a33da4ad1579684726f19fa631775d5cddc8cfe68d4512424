I"‰6<p>Sometimes I see code that sets up subviews in <code class="highlighter-rouge">viewDidLoad()</code> of a
view controller. Be a good citizen and donâ€™t do that. If you have
to add something to a view, do it in a <code class="highlighter-rouge">UIView</code> subclass.</p>

<p>Here is how I implement view and controller code when Iâ€™m not using
Interface Builder.</p>

<h2 id="the-view">The View</h2>

<p>Letâ€™s build a login view:
<!--more--></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">LoginStackView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>

  <span class="k">let</span> <span class="nv">usernameTextField</span><span class="p">:</span> <span class="kt">UITextField</span>
  <span class="k">let</span> <span class="nv">passwordTextField</span><span class="p">:</span> <span class="kt">UITextField</span>
  <span class="k">let</span> <span class="nv">button</span><span class="p">:</span> <span class="kt">UIButton</span>
  <span class="k">let</span> <span class="nv">stackView</span><span class="p">:</span> <span class="kt">UIStackView</span>
  
  <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">usernameTextField</span> <span class="o">=</span> <span class="kt">UITextField</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zeroRect</span><span class="p">)</span>
    <span class="n">usernameTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"Username"</span><span class="p">,</span> <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="n">usernameTextField</span><span class="o">.</span><span class="n">borderStyle</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Line</span>
    
    <span class="n">passwordTextField</span> <span class="o">=</span> <span class="kt">UITextField</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="o">.</span><span class="n">zeroRect</span><span class="p">)</span>
    <span class="n">passwordTextField</span><span class="o">.</span><span class="n">secureTextEntry</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="n">passwordTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"Password"</span><span class="p">,</span> <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
    <span class="n">passwordTextField</span><span class="o">.</span><span class="n">borderStyle</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Line</span>
    
    <span class="n">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="kt">System</span><span class="p">)</span>
    <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"Login"</span><span class="p">,</span> <span class="nv">forState</span><span class="p">:</span> <span class="o">.</span><span class="kt">Normal</span><span class="p">)</span>
    <span class="n">button</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="nf">grayColor</span><span class="p">()</span>
    <span class="n">button</span><span class="o">.</span><span class="n">tintColor</span> <span class="o">=</span> <span class="o">.</span><span class="nf">whiteColor</span><span class="p">()</span>
    <span class="n">button</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">5</span>
    
    <span class="k">let</span> <span class="nv">textFieldStackView</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">usernameTextField</span><span class="p">,</span> <span class="n">passwordTextField</span><span class="p">])</span>
    <span class="n">textFieldStackView</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Vertical</span>
    <span class="n">textFieldStackView</span><span class="o">.</span><span class="n">spacing</span> <span class="o">=</span> <span class="mi">10</span>
    <span class="n">textFieldStackView</span><span class="o">.</span><span class="n">distribution</span> <span class="o">=</span> <span class="o">.</span><span class="kt">FillEqually</span>
    
    <span class="n">stackView</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">textFieldStackView</span><span class="p">,</span> <span class="n">button</span><span class="p">])</span>
    <span class="n">stackView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">stackView</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="kt">Vertical</span>
    <span class="n">stackView</span><span class="o">.</span><span class="n">spacing</span> <span class="o">=</span> <span class="mi">20</span>

    <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="nf">whiteColor</span><span class="p">()</span>
        
    <span class="nf">addSubview</span><span class="p">(</span><span class="n">stackView</span><span class="p">)</span>
    
    <span class="c1">// MARK: - Layout</span>
    <span class="k">let</span> <span class="nv">views</span> <span class="o">=</span> <span class="p">[</span><span class="s">"stackView"</span><span class="p">:</span> <span class="n">stackView</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">layoutConstraints</span> <span class="o">=</span> <span class="p">[</span><span class="kt">NSLayoutConstraint</span><span class="p">]()</span>
    <span class="n">layoutConstraints</span> <span class="o">+=</span> <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">constraintsWithVisualFormat</span><span class="p">(</span><span class="s">"|-[stackView]-|"</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[],</span> <span class="nv">metrics</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">views</span><span class="p">:</span> <span class="n">views</span><span class="p">)</span>
    <span class="n">layoutConstraints</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">usernameTextField</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraintEqualToConstant</span><span class="p">(</span><span class="mi">30</span><span class="p">))</span>
    <span class="n">layoutConstraints</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">button</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraintEqualToConstant</span><span class="p">(</span><span class="mi">40</span><span class="p">))</span>
    <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activateConstraints</span><span class="p">(</span><span class="n">layoutConstraints</span><span class="p">)</span>
  <span class="p">}</span>
  
  <span class="kd">required</span> <span class="nf">init</span><span class="p">(</span><span class="n">coder</span> <span class="nv">aDecoder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This code defines two text fields and a button and puts it onto the view
with the help of <code class="highlighter-rouge">UIStackView</code> (line 26
and 31). If you havenâ€™t played with stack views yet, start now. They are
awesome!</p>

<p>Note that the layout constraints donâ€™t define the vertical position of
the stack view on the view. We will add vertical constraints in the view
controller.</p>

<h2 id="the-view-controller">The View Controller</h2>

<p>Here comes the view controller:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">LoginStackViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

  <span class="k">var</span> <span class="nv">loginView</span><span class="p">:</span> <span class="kt">LoginStackView</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">view</span> <span class="k">as!</span> <span class="kt">LoginStackView</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">contentView</span> <span class="o">=</span> <span class="kt">LoginStackView</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zeroRect</span><span class="p">)</span>
    
    <span class="n">contentView</span><span class="o">.</span><span class="n">button</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="s">"login"</span><span class="p">,</span> <span class="nv">forControlEvents</span><span class="p">:</span> <span class="o">.</span><span class="kt">TouchUpInside</span><span class="p">)</span>
    
    <span class="n">view</span> <span class="o">=</span> <span class="n">contentView</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewWillLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">loginView</span><span class="o">.</span><span class="n">stackView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraintEqualToAnchor</span><span class="p">(</span><span class="n">topLayoutGuide</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">active</span> <span class="o">=</span> <span class="kc">true</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"login"</span><span class="p">)</span>
  <span class="p">}</span>

<span class="p">}</span></code></pre></figure>

<p>If you build your user interface in code you should override <code class="highlighter-rouge">loadView()</code>. Within
<code class="highlighter-rouge">loadView()</code> you
need to set the <strong>view</strong> property of the view controller. In this
example we additionally add a target to the login button.</p>

<p>Note the definition of the calculated property <strong>loginView</strong>. This is
done to allow the access of the <code class="highlighter-rouge">loginView</code>â€™s <code class="highlighter-rouge">stackView</code> in 
<code class="highlighter-rouge">viewWillLayoutSubviews()</code>.</p>

<p>The view controller can be presented within a navigation controller (and
in fact is in the demo project). To position the stack view in respect
to the bottom edge of the navigation bar we use the <code class="highlighter-rouge">topLayoutGuide</code> of
the view controller. This takes into account the navigation bar. This
means the code <code class="highlighter-rouge">viewWillLayoutSubviews()</code>
puts the stack view 8 points below the navigation bar.</p>

<p>The so defined login screen looks like this:<br />
<img src="/assets/Simulator-Screen-Shot-04.08.2015-22.45.03-200x300.png" alt="" /></p>

<p>You can find the sample code on
<a href="https://github.com/dasdom/AutoLayoutInCodeDemo">github</a>. In the sample
project you can also find three other possibilities to define the layout
and in addition the version using Interface Builder.</p>

<p>If you enjoyed this post, then make sure you subscribe to my
<a href="http://swiftandpainless.com/feed">feed</a>.</p>
:ET