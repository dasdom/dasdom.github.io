I"f<p>Here is the problem: Sometimes you want to test an element that could be
nil. For example, I recently wanted to test if a view controller has a
right bar button item with a given target. This could be done like this:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testViewController_HasAddButtonInNavigationBar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">view</span>
  
  <span class="kt">XCTAssertNotNil</span><span class="p">(</span><span class="n">viewController</span><span class="o">.</span><span class="n">navigationController</span><span class="p">)</span>
  <span class="kt">XCTAssertNotNil</span><span class="p">(</span><span class="n">viewController</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span><span class="p">)</span>
  <span class="k">let</span> <span class="nv">addBarButton</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span><span class="o">!</span>
  <span class="k">let</span> <span class="nv">target</span> <span class="o">=</span> <span class="n">addBarButton</span><span class="o">.</span><span class="n">target</span>
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">target</span> <span class="k">as!</span> <span class="kt">TimerTableViewController</span><span class="p">,</span> <span class="n">viewController</span><span class="p">,</span> <span class="s">"The view controller should be the target of the right bar button"</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>The problem with this code is, that if there is no right bar button item
the test execution crashes. Let’s make it kind of better:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testViewController_HasAddButtonInNavigationBar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">view</span>
  
  <span class="k">if</span> <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">navigationController</span> <span class="p">{</span>
    <span class="kt">XCTAssertNotNil</span><span class="p">(</span><span class="n">viewController</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span><span class="p">)</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">addBarButton</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">target</span> <span class="o">=</span> <span class="n">addBarButton</span><span class="o">.</span><span class="n">target</span>
      <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">target</span> <span class="k">as!</span> <span class="kt">TimerTableViewController</span><span class="p">,</span> <span class="n">viewController</span><span class="p">,</span> <span class="s">"The view controller should be the target of the right bar button"</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kt">XCTAssertFalse</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Uhhg… Now it doesn’t crash but it’s really ugly. Here comes the rescue
with guard:
<!--more--></p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">func</span> <span class="nf">testViewController_HasAddButtonInNavigationBar</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">view</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">_</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">navigationController</span> <span class="k">else</span> <span class="p">{</span> <span class="kt">XCTFail</span><span class="p">(</span><span class="s">"There should be a navigation controller"</span><span class="p">);</span> <span class="k">return</span> <span class="p">}</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">addBarButton</span> <span class="o">=</span> <span class="n">viewController</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span> <span class="k">else</span> <span class="p">{</span>
    <span class="kt">XCTFail</span><span class="p">(</span><span class="s">"The navigation bar should have a button on the right"</span><span class="p">)</span>
    <span class="k">return</span>
  <span class="p">}</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">target</span> <span class="o">=</span> <span class="n">addBarButton</span><span class="o">.</span><span class="n">target</span> <span class="k">else</span> <span class="p">{</span> <span class="kt">XCTFail</span><span class="p">(</span><span class="s">"The bar button should have a target"</span><span class="p">);</span> <span class="k">return</span> <span class="p">}</span>
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">target</span> <span class="k">as!</span> <span class="kt">TimerTableViewController</span><span class="p">,</span> <span class="n">viewController</span><span class="p">,</span> <span class="s">"The view controller should be the target of the right bar button"</span><span class="p">)</span>  
<span class="p">}</span></code></pre></figure>

<p>This is beautiful! Thanks Swift 2.0 and thanks guard! If you enjoyed
this post, then make sure you subscribe to my
<a href="http://swiftandpainless.com/feed">feed</a>.</p>

<p><strong>Update:</strong> As suggested in the comments by Stephan Michels I changed
<code class="highlighter-rouge">XCTAssertFalse()</code> to <code class="highlighter-rouge">XCTFail()</code>.
Thanks Stephan!</p>

<p><strong>Update 2:</strong> David Owens II <a href="https://twitter.com/owensd/status/627946978882682880">wrote on
Twitter</a> that you
can get the same behavior without guard when adding 
<code class="highlighter-rouge">set.continueAfterFailure = false</code> to the <code class="highlighter-rouge">setUp()</code>. Thanks
David!</p>
:ET