<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>dasdom</title><description>Swift, iOS, ObjC and stuff</description><link>https://dasdom.dev</link><language>en</language><lastBuildDate>Sat, 22 Aug 2020 14:17:54 +0200</lastBuildDate><pubDate>Sat, 22 Aug 2020 14:17:54 +0200</pubDate><ttl>250</ttl><atom:link href="https://dasdom.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://dasdom.dev/posts/same-app-different-approches-ib-part-one</guid><title>One App, Different Approaches: Interface Builder (Part One)</title><description></description><link>https://dasdom.dev/posts/same-app-different-approches-ib-part-one</link><pubDate>Tue, 25 Aug 2020 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>One App, Different Approaches: Interface Builder (Part One)</h1><p>As an iOS developer you need to be able to build the user interface of your apps using different approaches. Without using a third party library you can mainly choose between Storyboards, using code to build the user interface, and SwiftUI. Each of these has it's advantages and disadvantages and each developer has a preference.</p><p>I think beginners should learn about these different approaches right from the start. That's why I use all three in my book <a href="https://pragprog.com/book/dhios/build-location-based-projects-for-ios">Build Location-Bases Projects for iOS</a>. I'm quite proud of it and I think you should check it out.</p><img src="../../assets/2020-08-25/build_location_based_projects.jpg"/><p>In this and the next several blog posts I will show you how to build one app using these different approaches. The app we build is a birthday countdown app. You can add the birthdays of your loved ones and the app shows you the number of days until their next birthday. It will look like this:</p><img src="../../assets/2020-08-25/the_app.png"/><p>(From the number you can reconstruct when I wrote the blog post. ;))</p><p>In this post we will use a Storyboard for the user interface.</p><blockquote><p>Note: We will put all the screens in one Storyboard because it's a small and simple app. In a real app, you might want to split the user interface into several Storyboards. Let me know when you like to see a post about that in the future.</p></blockquote><p>We want to concentrate on the differences in building the user interface. Adding and storing the birthday data would distract from the main topic. We will use a Swift package that I wrote for this blog mini series to hide how this works.</p><h2>Creating The Xcode Project</h2><p>Open Xcode and create a new project using the shortcut ⌘⇧N. Choose the Single View App template and click Next. Type in the name BirthdaysIB, select the language Swift, select Storyboard for the User Interface and deselect the check boxes for Core Data, Include Unit Tests and Include UI Tests. We won't write tests in this demo app and storing the data is manages by the Swift package we will include.</p><img src="../../assets/2020-08-25/project_options.png"/><p>Click Next, choose a location on your disk to store the project and click Create.</p><p>Next we add the package that will manage the birthday data.</p><h2>Adding The Swift Package</h2><p>Select the Xcode menu item <code>File &gt; Swift Packages &gt; Add Package Dependency</code> and paste the package URL <code>https://github.com/dasdom/Birthdays</code> into the search field. Click Next, click Next again and click Finish. Xcode adds the package to the project. Subsequently the project navigator should look like this:</p><img src="../../assets/2020-08-25/project_navigator_after_adding_the_package.png"/><h2>Creating The Birthday Countdown View</h2><p>Now let's create the user interface that shows the remaining days until the next birthdays. Click <code>Main.storyboard</code> to open it in the Interface Builder, show the library using the shortcut ⌘⇧L and drag a <code>UITableViewController</code> into the Storyboard. Open the attributes inspector with the shortcut ⌥⌘5 and check the check box next to Is Initial View Controller. Delete the View Controller Scene from the Storyboard.</p><blockquote><p>Note: With all the enhancements in <code>UICollectionView</code> in iOS 13 and iOS 14 the user interface could easily be implemented using a collection view with compositional layout. In fact we will do that in the chapter in which we build this app without a storyboard. In this chapter we will use a <code>UITableView</code> because in a storyboard we can only use a collection view flow layout.</p></blockquote><p>Open the library again and drag two labels into the table view cell of the table view. Select both labels by clicking one of them and pressing the ⌘ key while you click the other one. Then click the Embed button (the one with the arrow pointing into a box) in the lower right corner of the interface builder. In the pop up window select Stack View:</p><img src="../../assets/2020-09-25/embed_label_into_stackview.png"/><p>Stack views are a very powerful tool to easily create complex layouts. They layout their arranged views vertically or horizontally and you only have to configure a few variables. See for example <a href="../uistackviewplayground/">UIStackViewPlayground</a>.</p><p>With the created stack view selected, open the attributes inspector using the shortcut ⌥⌘5. Look for the setting with the name Spacing. This value defines the spacing between the arranged sub views of the stack view. Type in the value <code>10</code> and press return. The Interface Builder reduces the size of the stack view such that it just large enough to embed its sub views respecting the set spacing.</p><p>Next we need to add layout constraints to define the position of the stack view within the table view cell. Select the stack view and click the Add New Constraint button (the one with the square between the vertical lines) in the lower right of the Interface Builder. Xcode opens a pop up window in which we can define the constraints we want to add. Type in <code>0</code> into the four text fields in the upper third of the pop up and make sure the red markers are selected like shown in the following image:</p><img src="../../assets/2020-08-25/stackview_constraints_in_cell.png"/><p>Click Add 4 Constraints. After adding the constraints, Interface Builder shows a red circle with a black arrow in the structure overview of the storyboard to indicate that there is a problem with the added layout constraints.</p><img src="../../assets/2020-08-25/layout_error_in_cell.png"/><p>Click the button to figure out, what the problem is. The shown information is a bit confusing so let me explain what the problem is. We haven't told the stack view exactly how it should layout its sub views. We just told it that the spacing should be exactly 10 points. But what should be the width of the labels? And which of the labels should shrink if there is not enough space to show both?</p><p>We have to tell the stack view, or more precisely the layout system what to do. The easiest way to solve this problem is to tell the layout system that the label on the right should pull its edges inward. Select the right button, open the size inspector (⌥⌘6) and set the horizontal hugging priority to 252 as show in the following image:</p><img src="../../assets/2020-08-25/hugging_priority_days_lable.png"/><p>Subsequently the error indicator in the structure overview is gone. Let's make the user interface a little bit more pleasing. Select the left label, open the attributes inspector and change the font style to bold.</p><h2>Embedding in a Navigation Controller</h2><p>The user should see what this app is about. Let's embed the view controller into a navigation controller to add a navigation bar to put the title in. This has the great advantage that we can put the button to add birthdays to the list there as well.</p><p>In the Interface Builder select the table view controller and click the Xcode menu item <em>Editor / Embed In / Navigation Controller</em>. Next select the navigation bar of the added navigation controller and open the attribute inspector (⌥⌘5). Check the check box at Prefers Large Titles. Then click the navigation bar in the table view controller and type in the title "Birthdays".</p><p>Next we are going to add the source code for the birthday countdown list.</p><h2>BithdayCountdownViewController</h2><p>First remove the file <em>ViewController.swift</em>. Next use the shortcut ⌘N to add a new Cocoa Touch Class. Type in the name <code>BirthdaysCountdownViewController</code> and make it the subclass of <code>UITableViewController</code>. Make sure the check box at Also create XIB file is not selected and the language is set to Swift. Click Next and the click Create.</p><p>The birthdays are managed by our Birthdays package so we need to import it into this file. The package uses Combine to publish changes to the list of birthdays. Add the following import statements to <code>BirthdaysCountdownViewController</code> below the existing import statement:</p><pre><code><span class="keyword">import</span> Birthdays
<span class="keyword">import</span> Combine
</code></pre><p>Next add the following property of a <code>BirthdaysManager</code> to <code>BirthdaysCountdownViewController</code>:</p><pre><code><span class="keyword">private let</span> birthdaysManager = <span class="type">BirthdaysManager</span>()
</code></pre><p>You don't need to understand how the <code>BirthdaysManager</code> works for this blog series. You only need to know that you can add birthdays and subscribe to changes via Combine.</p><p>To be notified when something in the list of birthday countdowns changes, we need to subscribe to the corresponding Combine publisher. Add the following property to <code>BirthdaysCountdownViewController</code>:</p><pre><code><span class="keyword">private var</span> subscription: <span class="type">AnyCancellable</span>?
</code></pre><p>We also need a property to hold the birthdayCountdowns to be shown in the table view. Add the following property for and array of <code>BirthdayCountdown</code>s:</p><pre><code><span class="keyword">private var</span> birthdayCountdowns: [<span class="type">BirthdayCountdown</span>] = [] {
  <span class="keyword">didSet</span> {
    <span class="keyword">self</span>.<span class="property">tableView</span>.<span class="call">reloadData</span>()
  }
}
</code></pre><p>When ever the array with the birthday countdowns changes, we just reload the table view. Usually you wouldn't reload the whole table view when only one of the entries changes but for the moment this is OK because adding new birthdays countdowns will we handled in another view.</p><p>To subscribe to changes add the following code at the end of <code>viewDidLoad()</code>:</p><pre><code>subscription = birthdaysManager.$birthdayCounts
  .<span class="call">sink</span>(receiveValue: { birthdayCounts <span class="keyword">in
    self</span>.<span class="property">birthdayCountdowns</span> = birthdayCounts
  })
</code></pre><p>With this code we subscribe to changes in the birthday counts array in the <code>Birthdays</code> package.</p><p>In the storyboard we added some label to the table view cell. We also need a class for that table view cell to be able to connect the code of the cell with the cell in the storyboard. Add a new Cocoa Touch Class to the project using the shortcut ⌘N, type in the name BirthdayCountdownCell and make it a subclass of <code>UITableViewCell</code>. Remove the code in the created class.</p><p>Next we need to connect the storyboard with the code. Open <code>Main.storyboard</code>, select the table view controller and open the identity inspector (⌥⌘4). In the text field next to Class type in the name <code>BirthdaysCountdownViewController</code> and press return.</p><p>Then select the table view cell and set the class in the identity inspector to <code>BirthdayCountdownCell</code> and press return. Open the attributes inspector with the shortcut ⌥⌘5 and type in the Identifier <code>BirthdayCountdownCell</code> and press return.</p><blockquote><p>Note: I always use the class name as the identifier of the table view cell. That way I have less to remember when returning back to the code.</p></blockquote><p>In the storyboard click the table view cell until it is colored and open the assistant editor with the shortcut ⌃⌥⌘⏎. Next select <em>BirthdayCountdownCell.swift</em> in the header bar of the editor:</p><img src="../../assets/2020-08-25/cell_in_editor_header_bar.png"/><p>Press and hold the control key and drag from the left label into the <code>BirthdayCountdownCell</code> class. In the appearing pop-up window, type in the name <code>nameLabel</code> and make sure that Connection is set to Outlet:</p><img src="../../assets/2020-08-25/name_label_outlet_config.png"/><p>In the same way create an outlet for the right label with the name <code>countLabel</code>.</p><p>The cell shows the name of the person and the number of days until their next birthday. Import the Birthdays module and add the following method that we will call from the table view controller to setup the cell with the data:</p><pre><code><span class="keyword">import</span> UIKit
<span class="keyword">import</span> Birthdays

<span class="keyword">class</span> BirthdayCountdownCell: <span class="type">UITableViewCell</span> {

  <span class="keyword">@IBOutlet var</span> nameLabel: <span class="type">UILabel</span>!
  <span class="keyword">@IBOutlet var</span> countLabel: <span class="type">UILabel</span>!
  
  <span class="keyword">func</span> update(with birthdayCount: <span class="type">BirthdayCountdown</span>) {
    nameLabel.<span class="property">text</span> = birthdayCount.<span class="property">name</span>
    countLabel.<span class="property">text</span> = <span class="string">"</span>\(birthdayCount.<span class="property">remainingDays</span>)<span class="string">"</span>
  }
}
</code></pre><p>Next open <em>BirthdaysCountdownViewController.swift</em>, delete the method <code>numberOfSections(in:)</code> and replace the methods <code>tableView(_:numberOfRowsInSection:)</code> with the following code:</p><pre><code><span class="keyword">override func</span> tableView(<span class="keyword">_</span> tableView: <span class="type">UITableView</span>, numberOfRowsInSection section: <span class="type">Int</span>) -&gt; <span class="type">Int</span> {
  <span class="keyword">return</span> birthdayCountdowns.<span class="property">count</span>
}
</code></pre><p>With this code we tell the table view that it contains <code>birthdayCountdowns.count</code> cells. Next, we have to tell the table view which cell it should use. Add the following method to <code>BirthdaysCountdownViewController</code>:</p><pre><code><span class="keyword">override func</span> tableView(<span class="keyword">_</span> tableView: <span class="type">UITableView</span>, cellForRowAt indexPath: <span class="type">IndexPath</span>) -&gt; <span class="type">UITableViewCell</span> {
  
  <span class="keyword">let</span> cell = tableView.<span class="call">dequeueReusableCell</span>(withIdentifier: <span class="string">"BirthdayCell"</span>, for: indexPath) <span class="keyword">as</span>! <span class="type">BirthdayCell</span>
  
  <span class="keyword">let</span> birthday = birthdayCounts[indexPath.<span class="property">row</span>]
  cell.<span class="call">update</span>(with: birthday)
  
  <span class="keyword">return</span> cell
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/mask-transition-between-view-controllers</guid><title>Building An Expanding Circle Transition Between View Controllers</title><description>How to build a punch out custom transition between view controllers.</description><link>https://dasdom.dev/posts/mask-transition-between-view-controllers</link><pubDate>Tue, 18 Aug 2020 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Building An Expanding Circle Transition Between View Controllers</h1><p>I love custom transitions between view controllers. One of the easiest of these transitions is taking an element from the previous view and animating it to its new place in the next view. For example like shown in this gif:</p><img src="../../assets/2020-08-18/image_transition.gif"/><p>At the job I had to implement another custom transition where an expanding circular region got punched out of the current view showing the next view beneath it. It took me a while and several wrong path to finally get it working.</p><p>The result looks like this:</p><img src="../../assets/2020-08-18/circular_transition.gif"/><p>(In reality the transition is a bit faster. I slowed it down for this gif to make the shadow easier to see.) The first approach we took was to add a circular expanding mask to the next view.</p><h2>First Approach: Expanding Mask</h2><p>Since iOS 8 <code>UIView</code> has a <code>mask</code> property that can be used to mask the shown portion of the view. To use this mask in a transition, we first need a <code>NSObject</code> subclass that conforms to the protocol <code>UIViewControllerAnimatedTransitioning</code>:</p><pre><code><span class="keyword">class</span> MaskTransition: <span class="type">NSObject</span>, <span class="type">UIViewControllerAnimatedTransitioning</span> {
  
  <span class="keyword">let</span> duration: <span class="type">TimeInterval</span> = <span class="number">1</span>
  
  <span class="keyword">func</span> transitionDuration(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>?) -&gt; <span class="type">TimeInterval</span> {
    <span class="keyword">return</span> duration
  }
  
  <span class="keyword">func</span> animateTransition(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>) {
    <span class="comment">// To be implemented</span>
  }
}
</code></pre><p>We define the transition animation in the method <code>animateTransition(using:)</code>. Within this method we can access the involved view controllers through the <code>transitionContext</code> like this:</p><pre><code><span class="keyword">guard let</span> from = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">from</span>),
  <span class="keyword">let</span> to = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">to</span>) <span class="keyword">else</span> {
    transitionContext.<span class="call">completeTransition</span>(<span class="keyword">false</span>)
    <span class="keyword">return</span>
}
</code></pre><p>The transition itself happens in a container view. We have to add the views that should be visible during the transition to that container view:</p><pre><code><span class="keyword">let</span> containerView = transitionContext.<span class="property">containerView</span>

containerView.<span class="call">addSubview</span>(from.<span class="property">view</span>)
containerView.<span class="call">addSubview</span>(to.<span class="property">view</span>)
</code></pre><p>Next we define the start and the end radius of the view mask:</p><pre><code><span class="keyword">let</span> fromRadius: <span class="type">CGFloat</span> = <span class="number">4</span>
<span class="keyword">let</span> toRadius: <span class="type">CGFloat</span> = containerView.<span class="property">bounds</span>.<span class="property">size</span>.<span class="property">height</span> * <span class="number">1.2</span>
</code></pre><p>We define the view to be used as the mask view and add it to the view we are transition to:</p><pre><code><span class="keyword">let</span> maskView = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>,
                                    width: fromRadius, height: fromRadius))
maskView.<span class="property">backgroundColor</span> = .<span class="dotAccess">white</span>
maskView.<span class="property">center</span> = containerView.<span class="property">center</span>
maskView.<span class="property">layer</span>.<span class="property">cornerRadius</span> = fromRadius/<span class="number">2</span>

to.<span class="property">view</span>.<span class="property">mask</span> = maskView
</code></pre><p>Note that we set the <code>backgroundColor</code> of the mask view to <code>.white</code> here. As this view is used as a mask, only the alpha value of that background color is used. So you could also set the color to any other color as long as its alpha value is <code>1</code>.</p><p>Finally we can animate the transition like this:</p><pre><code><span class="type">UIViewPropertyAnimator</span>.<span class="call">runningPropertyAnimator</span>(
  withDuration: duration, delay: <span class="number">0</span>, options: .<span class="dotAccess">curveEaseIn</span>, animations: {
    
    maskView.<span class="property">frame</span> = <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: toRadius, height: toRadius)
    maskView.<span class="property">center</span> = containerView.<span class="property">center</span>
    maskView.<span class="property">layer</span>.<span class="property">cornerRadius</span> = toRadius/<span class="number">2</span>
    
}) { position <span class="keyword">in</span>
  
  to.<span class="property">view</span>.<span class="property">mask</span> = <span class="keyword">nil
  let</span> complete = !transitionContext.<span class="property">transitionWasCancelled</span>
  transitionContext.<span class="call">completeTransition</span>(complete)
  
}
</code></pre><p>When the animation is finished, we need to tell the transition context that the transition is complete. Don't forget this step otherwise the transition never finishes and the user interface stays unresponsive.</p><p>To use this transition when a view controller gets pushed onto the navigation stack, create a class called <code>NavigationControllerDelegate</code> and add the following code:</p><pre><code><span class="keyword">class</span> NavigationControllerDelegate: <span class="type">NSObject</span>, <span class="type">UINavigationControllerDelegate</span> {
  
  <span class="keyword">func</span> navigationController(<span class="keyword">_</span> navigationController: <span class="type">UINavigationController</span>,
                            animationControllerFor operation: <span class="type">UINavigationController</span>.<span class="type">Operation</span>, 
                            from fromVC: <span class="type">UIViewController</span>, 
                            to toVC: <span class="type">UIViewController</span>) -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? {
    
    <span class="keyword">return</span> <span class="type">MaskTransition</span>()
  }
}
</code></pre><p>Finally we need to set the delegate to the navigation controller we are using. You can do that where ever it fits in your code. As I'm creating the user interface in code, a good place to set the navigation controller delegate is the scene delegate where I create the navigation controller:</p><pre><code><span class="keyword">var</span> navigationControllerDelegate = <span class="type">NavigationControllerDelegate</span>()

<span class="keyword">func</span> scene(<span class="keyword">_</span> scene: <span class="type">UIScene</span>,
           willConnectTo session: <span class="type">UISceneSession</span>,
           options connectionOptions: <span class="type">UIScene</span>.<span class="type">ConnectionOptions</span>) {
  
  <span class="keyword">guard let</span> scene = (scene <span class="keyword">as</span>? <span class="type">UIWindowScene</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
  
  window = <span class="type">UIWindow</span>(windowScene: scene)
  <span class="keyword">let</span> navigationController = <span class="type">UINavigationController</span>(rootViewController: <span class="type">ViewController</span>())
  navigationController.<span class="property">delegate</span> = navigationControllerDelegate
  window?.<span class="property">rootViewController</span> = navigationController
  window?.<span class="call">makeKeyAndVisible</span>()
}
</code></pre><p>This transition looks kind of what we try to achieve but one essential part is missing: the shadow. There should be a shadow indicating that this is a punch out in the current view, revealing the next view underneath it. I tried everything I could imagine but I didn't manage to add this shadow. This is not really surprising as we do not punch out anything here. So to make the transition as required, we have to actually punch out a portion of the view.</p><p>(If you don't need the shadow, you can use this transition because it's simpler than the following one.)</p><h2>Punch Out With Shadow</h2><p>First let's recreate the transition we did with the mask view but this time punching out instead of masking. The start of <code>animateTransition(using:)</code> looks the same:</p><pre><code><span class="keyword">func</span> animateTransition(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>) {
  
  <span class="keyword">guard let</span> from = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">from</span>),
    <span class="keyword">let</span> to = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">to</span>) <span class="keyword">else</span> {
      transitionContext.<span class="call">completeTransition</span>(<span class="keyword">false</span>)
      <span class="keyword">return</span>
  }
  
  <span class="keyword">let</span> containerView = transitionContext.<span class="property">containerView</span>
  containerView.<span class="call">addSubview</span>(to.<span class="property">view</span>)
  containerView.<span class="call">addSubview</span>(from.<span class="property">view</span>)
  
  <span class="keyword">let</span> fromWidth: <span class="type">CGFloat</span> = <span class="number">4</span>
  <span class="keyword">let</span> toWidth = containerView.<span class="property">bounds</span>.<span class="property">size</span>.<span class="property">height</span> * <span class="number">1.2</span>
  
  <span class="comment">// More code...</span>
}
</code></pre><p>Instead of masking, we define a <code>UIBezierPath</code> consisting of a rectangle around the container view and small circular path in the center:</p><pre><code><span class="keyword">let</span> center = containerView.<span class="property">center</span>
<span class="keyword">let</span> fromPath = <span class="type">UIBezierPath</span>(rect: containerView.<span class="property">bounds</span>)
<span class="keyword">let</span> fromRect = <span class="type">CGRect</span>(x: center.<span class="property">x</span> - fromWidth/<span class="number">2</span>, y: center.<span class="property">y</span> - fromWidth/<span class="number">2</span>, width: fromWidth, height: fromWidth)
<span class="keyword">let</span> maskFromPath = <span class="type">UIBezierPath</span>(ovalIn: fromRect)
fromPath.<span class="call">append</span>(maskFromPath)
</code></pre><p>In the same way we define a <code>UIBezierPath</code> with a larger frame and a much larger circular path:</p><pre><code><span class="keyword">let</span> toPath = <span class="type">UIBezierPath</span>(rect: containerView.<span class="property">bounds</span>.<span class="call">insetBy</span>(dx: -<span class="number">40</span>, dy: -<span class="number">40</span>))
<span class="keyword">let</span> toRect = <span class="type">CGRect</span>(x: center.<span class="property">x</span> - toWidth/<span class="number">2</span>, y: center.<span class="property">y</span> - toWidth/<span class="number">2</span>, width: toWidth, height: toWidth)
<span class="keyword">let</span> maskToPath = <span class="type">UIBezierPath</span>(ovalIn: toRect)
toPath.<span class="call">append</span>(maskToPath)
</code></pre><p>Next we need two layers; one for the mask and one for the shadow:</p><pre><code><span class="keyword">let</span> maskLayer = <span class="type">CAShapeLayer</span>()
maskLayer.<span class="property">frame</span> = containerView.<span class="property">bounds</span>
maskLayer.<span class="property">fillRule</span> = .<span class="dotAccess">evenOdd</span>
maskLayer.<span class="property">path</span> = fromPath.<span class="property">cgPath</span>
from.<span class="property">view</span>.<span class="property">layer</span>.<span class="property">mask</span> = maskLayer

<span class="keyword">let</span> shadowLayer = <span class="type">CAShapeLayer</span>()
shadowLayer.<span class="property">frame</span> = containerView.<span class="property">bounds</span>
shadowLayer.<span class="property">fillRule</span> = .<span class="dotAccess">evenOdd</span>
shadowLayer.<span class="property">shadowColor</span> = <span class="type">UIColor</span>.<span class="property">black</span>.<span class="property">cgColor</span>
shadowLayer.<span class="property">shadowOpacity</span> = <span class="number">1</span>
shadowLayer.<span class="property">shadowRadius</span> = <span class="number">6</span>
shadowLayer.<span class="property">shadowOffset</span> = .<span class="dotAccess">zero</span>
shadowLayer.<span class="property">path</span> = fromPath.<span class="property">cgPath</span>
from.<span class="property">view</span>.<span class="property">superview</span>!.layer.<span class="call">insertSublayer</span>(shadowLayer, below: from.<span class="property">view</span>.<span class="property">layer</span>)
</code></pre><p>We have to use the <code>.evenOdd</code> fill rule because other wise the circular path is not punched out. The mask layer is used as the mask of the layer of the <code>from.view</code> like we did in the previous section with the mask view.</p><p>The shape layer is inserted in the layer tree underneath the layer of the <code>from.view</code>. It has the same path and also uses the <code>.evenOdd</code> fill rule.</p><p><code>UIViewPropertyAnimator</code> cannot animate layer properties. We have to fall back to <code>CABasicAnimation</code>:</p><pre><code><span class="type">CATransaction</span>.<span class="call">begin</span>()
<span class="type">CATransaction</span>.<span class="call">setCompletionBlock</span> {
  maskLayer.<span class="call">removeFromSuperlayer</span>()
  shadowLayer.<span class="call">removeFromSuperlayer</span>()
  
  <span class="keyword">let</span> complete = !transitionContext.<span class="property">transitionWasCancelled</span>
  transitionContext.<span class="call">completeTransition</span>(complete)
}

maskLayer.<span class="property">path</span> = toPath.<span class="property">cgPath</span>
shadowLayer.<span class="property">path</span> = toPath.<span class="property">cgPath</span>

<span class="keyword">let</span> animation = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"path"</span>)
animation.<span class="property">fromValue</span> = fromPath.<span class="property">cgPath</span>
animation.<span class="property">toValue</span> = toPath.<span class="property">cgPath</span>
animation.<span class="property">duration</span> = duration
animation.<span class="property">timingFunction</span> = <span class="type">CAMediaTimingFunction</span>(name: .<span class="dotAccess">easeIn</span>)

maskLayer.<span class="call">add</span>(animation, forKey: <span class="string">"pathAnimation"</span>)
shadowLayer.<span class="call">add</span>(animation, forKey: <span class="string">"pathAnimation"</span>)

<span class="type">CATransaction</span>.<span class="call">commit</span>()
</code></pre><p>The <code>CATransaction</code> let's us define a completion block that gets executed when the animation has finished. In the completion block we remove the layers and complete the transition.</p><p>That's it. We can now add a cool punch out circular transition between view controllers.</p><h2>The Pop Transition</h2><p>The code we have written only manages the push transition. In the pop transition we have to move some code around to make it work. Here is the complete code also handling the pop transition:</p><pre><code><span class="keyword">class</span> MaskTransition: <span class="type">NSObject</span>, <span class="type">UIViewControllerAnimatedTransitioning</span> {
  
  <span class="keyword">let</span> duration: <span class="type">TimeInterval</span> = <span class="number">1</span>
  <span class="keyword">let</span> operation: <span class="type">UINavigationController</span>.<span class="type">Operation</span>
  
  <span class="keyword">init</span>(operation: <span class="type">UINavigationController</span>.<span class="type">Operation</span>) {
    <span class="keyword">self</span>.<span class="property">operation</span> = operation
    
    <span class="keyword">super</span>.<span class="keyword">init</span>()
  }
  
  <span class="keyword">func</span> transitionDuration(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>?) -&gt; <span class="type">TimeInterval</span> {
    <span class="keyword">return</span> duration
  }
  
  <span class="keyword">func</span> animateTransition(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>) {

    <span class="keyword">guard let</span> from = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">from</span>),
      <span class="keyword">let</span> to = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">to</span>) <span class="keyword">else</span> {
        transitionContext.<span class="call">completeTransition</span>(<span class="keyword">false</span>)
        <span class="keyword">return</span>
    }

    <span class="keyword">let</span> containerView = transitionContext.<span class="property">containerView</span>
    <span class="keyword">if</span> operation == .<span class="dotAccess">push</span> {
      containerView.<span class="call">addSubview</span>(to.<span class="property">view</span>)
      containerView.<span class="call">addSubview</span>(from.<span class="property">view</span>)
    } <span class="keyword">else</span> {
      containerView.<span class="call">addSubview</span>(from.<span class="property">view</span>)
      containerView.<span class="call">addSubview</span>(to.<span class="property">view</span>)
    }

    <span class="keyword">let</span> fromWidth: <span class="type">CGFloat</span> = <span class="number">4</span>
    <span class="keyword">let</span> center = containerView.<span class="property">center</span>
    <span class="keyword">let</span> fromPath = <span class="type">UIBezierPath</span>(rect: containerView.<span class="property">bounds</span>)
    <span class="keyword">let</span> fromRect = <span class="type">CGRect</span>(x: center.<span class="property">x</span> - fromWidth/<span class="number">2</span>, y: center.<span class="property">y</span> - fromWidth/<span class="number">2</span>, width: fromWidth, height: fromWidth)
    <span class="keyword">let</span> maskFromPath = <span class="type">UIBezierPath</span>(ovalIn: fromRect)
    fromPath.<span class="call">append</span>(maskFromPath)
    fromPath.<span class="property">usesEvenOddFillRule</span> = <span class="keyword">true

    let</span> toWidth = containerView.<span class="property">bounds</span>.<span class="property">size</span>.<span class="property">height</span> * <span class="number">1.2</span>
    <span class="keyword">let</span> toPath = <span class="type">UIBezierPath</span>(rect: containerView.<span class="property">bounds</span>.<span class="call">insetBy</span>(dx: -<span class="number">40</span>, dy: -<span class="number">40</span>))
    <span class="keyword">let</span> toRect = <span class="type">CGRect</span>(x: center.<span class="property">x</span> - toWidth/<span class="number">2</span>, y: center.<span class="property">y</span> - toWidth/<span class="number">2</span>, width: toWidth, height: toWidth)
    <span class="keyword">let</span> maskToPath = <span class="type">UIBezierPath</span>(ovalIn: toRect)
    toPath.<span class="call">append</span>(maskToPath)
    toPath.<span class="property">usesEvenOddFillRule</span> = <span class="keyword">true

    let</span> maskLayer = <span class="type">CAShapeLayer</span>()
    maskLayer.<span class="property">frame</span> = containerView.<span class="property">bounds</span>
    maskLayer.<span class="property">fillRule</span> = .<span class="dotAccess">evenOdd</span>
    <span class="keyword">if</span> operation == .<span class="dotAccess">push</span> {
      maskLayer.<span class="property">path</span> = fromPath.<span class="property">cgPath</span>
      from.<span class="property">view</span>.<span class="property">layer</span>.<span class="property">mask</span> = maskLayer
    } <span class="keyword">else</span> {
      maskLayer.<span class="property">path</span> = toPath.<span class="property">cgPath</span>
      to.<span class="property">view</span>.<span class="property">layer</span>.<span class="property">mask</span> = maskLayer
    }

    <span class="keyword">let</span> shadowLayer = <span class="type">CAShapeLayer</span>()
    shadowLayer.<span class="property">frame</span> = containerView.<span class="property">bounds</span>
    shadowLayer.<span class="property">fillRule</span> = .<span class="dotAccess">evenOdd</span>
    shadowLayer.<span class="property">shadowColor</span> = <span class="type">UIColor</span>.<span class="property">black</span>.<span class="property">cgColor</span>
    shadowLayer.<span class="property">shadowOpacity</span> = <span class="number">1</span>
    shadowLayer.<span class="property">shadowRadius</span> = <span class="number">6</span>
    shadowLayer.<span class="property">shadowOffset</span> = .<span class="dotAccess">zero</span>
    <span class="keyword">if</span> operation == .<span class="dotAccess">push</span> {
      shadowLayer.<span class="property">path</span> = fromPath.<span class="property">cgPath</span>
      from.<span class="property">view</span>.<span class="property">superview</span>!.layer.<span class="call">insertSublayer</span>(shadowLayer, below: from.<span class="property">view</span>.<span class="property">layer</span>)
    } <span class="keyword">else</span> {
      shadowLayer.<span class="property">path</span> = toPath.<span class="property">cgPath</span>
      to.<span class="property">view</span>.<span class="property">superview</span>!.layer.<span class="call">insertSublayer</span>(shadowLayer, below: to.<span class="property">view</span>.<span class="property">layer</span>)
    }

    <span class="type">CATransaction</span>.<span class="call">begin</span>()
    <span class="type">CATransaction</span>.<span class="call">setCompletionBlock</span> {
      maskLayer.<span class="call">removeFromSuperlayer</span>()
      shadowLayer.<span class="call">removeFromSuperlayer</span>()

      <span class="keyword">let</span> complete = !transitionContext.<span class="property">transitionWasCancelled</span>
      transitionContext.<span class="call">completeTransition</span>(complete)
    }

    <span class="keyword">if</span> operation == .<span class="dotAccess">push</span> {
      maskLayer.<span class="property">path</span> = toPath.<span class="property">cgPath</span>
      shadowLayer.<span class="property">path</span> = toPath.<span class="property">cgPath</span>
    } <span class="keyword">else</span> {
      maskLayer.<span class="property">path</span> = fromPath.<span class="property">cgPath</span>
      shadowLayer.<span class="property">path</span> = fromPath.<span class="property">cgPath</span>
    }

    <span class="keyword">let</span> animation = <span class="type">CABasicAnimation</span>(keyPath: <span class="string">"path"</span>)
    <span class="keyword">if</span> operation == .<span class="dotAccess">push</span> {
      animation.<span class="property">fromValue</span> = fromPath.<span class="property">cgPath</span>
      animation.<span class="property">toValue</span> = toPath.<span class="property">cgPath</span>
    } <span class="keyword">else</span> {
      animation.<span class="property">fromValue</span> = toPath.<span class="property">cgPath</span>
      animation.<span class="property">toValue</span> = fromPath.<span class="property">cgPath</span>
    }
    animation.<span class="property">duration</span> = duration
    animation.<span class="property">timingFunction</span> = <span class="type">CAMediaTimingFunction</span>(name: .<span class="dotAccess">easeIn</span>)
    maskLayer.<span class="call">add</span>(animation, forKey: <span class="string">"pathAnimation"</span>)
    shadowLayer.<span class="call">add</span>(animation, forKey: <span class="string">"pathAnimation"</span>)
    <span class="type">CATransaction</span>.<span class="call">commit</span>()

  }
</code></pre><p>To make it work, we need to pass in the operation in the navigation controller delegate:</p><pre><code><span class="keyword">class</span> NavigationControllerDelegate: <span class="type">NSObject</span>, <span class="type">UINavigationControllerDelegate</span> {
 
  <span class="keyword">func</span> navigationController(<span class="keyword">_</span> navigationController: <span class="type">UINavigationController</span>,
                            animationControllerFor operation: <span class="type">UINavigationController</span>.<span class="type">Operation</span>,
                            from fromVC: <span class="type">UIViewController</span>,
                            to toVC: <span class="type">UIViewController</span>) -&gt; <span class="type">UIViewControllerAnimatedTransitioning</span>? {
    
    <span class="keyword">return</span> <span class="type">MaskTransition</span>(operation: operation)
  }
}
</code></pre><h2>Conclusion</h2><p>Custom transitions between view controllers are not easy. But when you finally managed to write custom transitions, most of the times they add some cool personality to your apps.</p><p>Do you add custom transitions to your apps? How do they look like? Did you get feedback from your users about transitions in your app?</p><p>Have you an idea how to achieve the same look without using <code>CALayer</code>s and <code>CABasicAnimation</code>s? Do you have other comments or suggestions? Please let me know on Twitter: <a href="https://twitter.com/dasdom">@dasdom</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/adding-a-dev-menu-to-your-app</guid><title>Adding A Development Menu To Your App</title><description>A developer menu can help to speed up development.</description><link>https://dasdom.dev/posts/adding-a-dev-menu-to-your-app</link><pubDate>Tue, 11 Aug 2020 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Adding A Development Menu To Your App</h1><p>Often during development of an iOS app, I need to navigate to the same part of the app over and over again. Or I need to simulate events like discovery of iBeacons without having the iBeacons around. Or I need to test the look of the view with different data.</p><p>To make this and much more easy during development I often add a development menu to the app. When I long press the screen a menu appears that lets me switch to another part of the app or simulate events.</p><img src="../../assets/2020-08-11/dev-menu.png"/><p>Here is how this can easily be added your you UIKit app.</p><p>In this example implementation we want to be able to navigate to an arbitrary view controller and to send notifications via the <code>NotificationCenter</code>. Notifications can be used to trigger arbitrary actions in the apps and they are easy to remove when development is 'finished'. We define the type of the developer actions in the developer menu using an enum:</p><h2>Developer Menu Item</h2><pre><code><span class="keyword">enum</span> DevActionType {
  <span class="keyword">case</span> viewController
  <span class="keyword">case</span> notification
}
</code></pre><p>The structure holding the information about the developer menu item looks like this:</p><pre><code><span class="keyword">struct</span> DevAction {
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> identifier: <span class="type">String</span>
  <span class="keyword">let</span> type: <span class="type">DevActionType</span>
  <span class="keyword">var</span> userInfo: [<span class="type">AnyHashable</span> : <span class="type">Any</span>]?
  
  <span class="keyword">init</span>(name: <span class="type">String</span>,
       identifier: <span class="type">String</span>,
       type: <span class="type">DevActionType</span> = .<span class="dotAccess">viewController</span>,
       userInfo: [<span class="type">AnyHashable</span> : <span class="type">Any</span>]? = <span class="keyword">nil</span>) {
    
    <span class="keyword">self</span>.<span class="property">name</span> = name
    <span class="keyword">self</span>.<span class="property">identifier</span> = identifier
    <span class="keyword">self</span>.<span class="property">type</span> = type
    <span class="keyword">self</span>.<span class="property">userInfo</span> = userInfo
  }
}
</code></pre><p>The developer action consists of a name to be shown in the user interface, an identifier to define the action, a type, and an optional user info to be used in notifications. Next we need a method that we can call when we want to invoke the action. I think 'trigger' is a good name for this method. We have to pass in the window of the app to be able to replace the root view controller:</p><pre><code><span class="keyword">func</span> trigger(window: <span class="type">UIWindow</span>? = <span class="keyword">nil</span>) {
  <span class="keyword">switch</span> type {
    <span class="keyword">case</span> .<span class="dotAccess">viewController</span>:
      <span class="comment">// instantiate view controller and set as root</span>
      <span class="keyword">let</span> storyboard = <span class="type">UIStoryboard</span>(name: <span class="string">"Main"</span>, bundle: <span class="keyword">nil</span>)
      <span class="keyword">let</span> viewController = storyboard.<span class="call">instantiateViewController</span>(withIdentifier: identifier)
      window?.<span class="property">rootViewController</span> = viewController

    <span class="keyword">case</span> .<span class="dotAccess">notification</span>:
      <span class="comment">// post notification with identifier as name</span>
      <span class="keyword">let</span> notificationName = <span class="type">Notification</span>.<span class="type">Name</span>(rawValue: identifier)
      <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">post</span>(name: notificationName,
                                      object: <span class="keyword">self</span>,
                                      userInfo: userInfo)
  }
}
</code></pre><p>If the type of the action is <code>.viewController</code>, we instantiate an instance from the storyboard and set it as the root view controller of the window. If the type of the action is <code>.notification</code>, we post a notification using the identifier as the notification name and the user info.</p><p>With a structure for the developer action, we can setup the user interface for the developer menu. In <code>SceneDelegate.swift</code> we add the following extension:</p><pre><code><span class="keyword">extension</span> <span class="type">SceneDelegate</span> {
  <span class="keyword">func</span> setupDevMenu() {
    <span class="keyword">let</span> devActions = [
      <span class="type">DevAction</span>(name: <span class="string">"Foo"</span>, identifier: <span class="string">"FooViewController"</span>),
      <span class="type">DevAction</span>(name: <span class="string">"Login"</span>, identifier: <span class="string">"LoginViewController"</span>),
      <span class="type">DevAction</span>(name: <span class="string">"Profile"</span>, identifier: <span class="string">"ProfileViewController"</span>),
      <span class="type">DevAction</span>(name: <span class="string">"Name: Dasdom"</span>,
                identifier: <span class="string">"changeName"</span>,
                type: .<span class="dotAccess">notification</span>,
                userInfo: [<span class="string">"name"</span>: <span class="string">"dasdom"</span>])
    ]
    
    <span class="keyword">let</span> sheet = <span class="type">UIAlertController</span>(title: <span class="string">"Dev Menu"</span>,
                                  message: <span class="string">"Where do you wanna go?"</span>,
                                  preferredStyle: .<span class="dotAccess">actionSheet</span>)
    
    <span class="keyword">for</span> devAction <span class="keyword">in</span> devActions {
      <span class="keyword">let</span> action = <span class="type">UIAlertAction</span>(title: devAction.<span class="property">name</span>, style: .<span class="dotAccess">default</span>) { action <span class="keyword">in</span>
        devAction.<span class="call">trigger</span>(window: <span class="keyword">self</span>.<span class="property">window</span>)
      }
      sheet.<span class="call">addAction</span>(action)
    }
    
    sheet.<span class="call">addAction</span>(<span class="type">UIAlertAction</span>(title: <span class="string">"Cancel"</span>, style: .<span class="dotAccess">cancel</span>, handler: <span class="keyword">nil</span>))
    
    window?.<span class="property">rootViewController</span>?.<span class="call">present</span>(sheet, animated: <span class="keyword">true</span>, completion: <span class="keyword">nil</span>)
  }
}
</code></pre><p>With this extension we add a method to be called when we want to present the developer menu. In the method we define the developer actions. Next we define a <code>UIAlertController</code> sheet using the developer actions as actions. The action to be executed by the <code>UIAlertController</code> when we select a developer action just calls the trigger method of the developer action. We use the root view controller of the window to present the sheet in the user interface.</p><p>In our example the developer menu consists of four actions. Three to present view controllers and one to post a notification.</p><h2>Presenting The Developer Menu</h2><p>The final piece of the puzzle is to present the developer menu in the user interface. In my <a href="https://pragprog.com/titles/dhios/">book</a> I show how to use a special shake of the device to trigger a log screen. In this example we use a long press gesture recognizer to trigger the developer menu.</p><p>Fist we add a method that we use as an action for the gesture recognizer. A good place to define this method is the extension of <code>SceneDelegate</code> defined earlier.</p><pre><code><span class="keyword">@objc func</span> showDevMenu(<span class="keyword">_</span> sender: <span class="type">UIGestureRecognizer</span>) {
  <span class="call">setupDevMenu</span>()
}
</code></pre><p>Next we add the gesture recognizer to the window in <code>scene(_:willConnectTo:options:)</code> of the <code>SceneDelegate</code>:</p><pre><code><span class="preprocessing">#if DEBUG</span>
<span class="keyword">let</span> longPressRecognizer = <span class="type">UILongPressGestureRecognizer</span>(target: <span class="keyword">self</span>, action: <span class="keyword">#selector</span>(<span class="call">showDevMenu</span>(<span class="keyword">_</span>:)))
longPressRecognizer.<span class="property">minimumPressDuration</span> = <span class="number">2</span>
window?.<span class="call">addGestureRecognizer</span>(longPressRecognizer)
<span class="preprocessing">#endif</span>
</code></pre><p>It's a good idea to only add the gesture recognizer in DEBUG builds.</p><h2>Conclusion</h2><p>In some apps a developer menu can be a real time safer, especially when you have to iterate over one feature or a certain part of the user interface. It is quite easy to add such a developer menu in a way that it's safe and it doesn't affect the rest of the app. We can use notifications to trigger events or to add demo data and wrap this code in <code>#if DEBUG</code> statements.</p><p>What do you think about this approach? Are you using something similar? How do you deal with situations where you have to reach a screen way down in the navigation stack over and over again during development? Let me know on <a href="https://twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/testing-uicollection_uicollection_view_compositional_layout_list</guid><title>Testing a Custom UICollectionViewCompositionalLayout.list</title><description>At WWDC 2020 Apple added a list layout to UICollectionView. This post explains how to write a unit tests that asserts that the cell is populated correctly.</description><link>https://dasdom.dev/posts/testing-uicollection_uicollection_view_compositional_layout_list</link><pubDate>Sat, 6 Jun 2020 12:23:00 +0200</pubDate><content:encoded><![CDATA[<h1>Testing a Custom UICollectionViewCompositionalLayout.list</h1><p>In iOS 14 Apple added a collection view compositional layout that lets us create collection views that look and behave like <code>UITableView</code>s. It is based on UICollectionViewCompositionalLayout and as a result allows to create very complex collection view layouts with only little code.</p><p>I believe that we should test our view controllers. For example I often write tests that assure that setting up a table view cell works as intended. An example for such a test looks like this:</p><pre><code><span class="keyword">func</span> test_cellForRow_populatesCell() {
  <span class="comment">// given</span>
  sut.<span class="property">names</span> = [<span class="string">"foo"</span>]
  
  <span class="comment">// when</span>
  <span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(row: <span class="number">0</span>, section: <span class="number">0</span>)
  <span class="keyword">let</span> cell = tableView.<span class="property">dataSource</span>?.<span class="call">tableView</span>(tableView, cellForRowAt: indexPath)
  
  <span class="comment">// then</span>
  <span class="call">XCTAssertEqual</span>(cell?.<span class="property">textLabel</span>?.<span class="property">text</span>, sut.<span class="property">names</span>.<span class="property">first</span>)
}
</code></pre><p>(This code is taken from my book <a href="https://leanpub.com/tdd_ios_gimme_the_code">Test-Driven iOS Development - Gimme The Code</a>).</p><p>Testing the population of a table view cell is quite easy. We setup the data source, get the cell from it and assert that the relevant data is set to the label in the cell.</p><p>The list layout in <code>UICollectionViewCompositionalLayout</code> works quite differently. I don't want to go into detail in this post how you can setup a collection view with the new list layout. Let's safe that for a later post. All you need to know is that you setup a <code>UICellConfigurationState</code> and tell the cell that it needs to update it's configuration. The cell then calls the method <code>updateConfiguration(using:)</code> and you override that method to setup the cell.</p><p>You can see how this works in <code>CustomCellListViewController.swift</code> in the sample code provided by Apple <a href="https://developer.apple.com/documentation/uikit/views_and_controls/collection_views/implementing_modern_collection_views">here</a>.</p><p>When I tried to write a test for this, I ran into the problem that <code>updateConfiguration(using:)</code> is called after my test is finished. <s>So it looks like to me that UIKit postpones the call onto the next run loop. This means to be able to test the population of the collection view cell, I needed move the assertion to the next run loop as well.</s> The Apple engineer <a href="https://twitter.com/_mochs">@_mochs</a> answered to my posts, that it should be sufficient to call <code>layoutIfNeeded</code> on the cell to trigger populating the cell.</p><p>So, this works:</p><pre><code><span class="keyword">func</span> test_cellForItem_returnsConfiguresCell() {
    <span class="keyword">let</span> item = <span class="type">Item</span>(category: .<span class="dotAccess">music</span>, title: <span class="string">"Foo"</span>, description: <span class="string">"Bar"</span>)
    sut.<span class="property">items</span> = [item]
    sut.<span class="call">loadViewIfNeeded</span>()

    <span class="keyword">let</span> indexPath = <span class="type">IndexPath</span>(item: <span class="number">0</span>, section: <span class="number">0</span>)
    <span class="keyword">let</span> cell = collectionView.<span class="property">dataSource</span>?.<span class="call">collectionView</span>(collectionView, cellForItemAt: indexPath) <span class="keyword">as</span>! <span class="type">CustomListCell</span>

    <span class="keyword">let</span> listContentConfiguration = cell.<span class="property">listContentView</span>.<span class="property">configuration</span> <span class="keyword">as</span>! <span class="type">UIListContentConfiguration</span>
    <span class="call">XCTAssertEqual</span>(listContentConfiguration.<span class="property">text</span>, item.<span class="property">title</span>)
}
</code></pre><p>By the way, this is a test for the sample code provided by Apple. I've added tests to better understand what's going on.</p><p>Do you know a better way to test this? How would you test that the collection view cell in the list layout is populated properly?</p><p>If you have questions or remarks about this post, please let me know on Twitter: <a href="https://twitter.com/dasdom">@dasdom</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/using-tabs-in-xcode</guid><title>Using Tabs in Xcode</title><description>Tabs in Xcode can be quite useful. Here is how I use them.</description><link>https://dasdom.dev/posts/using-tabs-in-xcode</link><pubDate>Sat, 25 Apr 2020 12:23:00 +0200</pubDate><content:encoded><![CDATA[<h1>Using Tabs in Xcode</h1><p>Tabs in Xcode can be quite useful. I use them a lot.</p><img src="../../assets/2020-04-25/my_tabs_in_xcode.png"/><p>Usually I have a tab for coding (🤓), one for the files with a source control status (🗂), a tab for searching (🔍), a tab for debugging (🐞) and one for the build (💾).</p><h2>🤓 Coding</h2><p>The coding tab shows the project navigator with all files. Usually there is no inspector visible in the coding tab because most of the times I do my user interfaces in code.</p><h2>🗂 Source Control Status</h2><p>The source control status tab shows the project navigator with the source control status filter active.</p><img src="../../assets/2020-04-25/source_control_status_tab.png"/><p>This tab is useful when I need to figure out what I have changed since the last commit and if I need to revert a change I did while debugging.</p><h2>🔍 Search</h2><p>This tab shows the find navigator. This tab is useful when I need to find usages of a class or a method but want to keep track of the file I working on right now in the coding tab.</p><h2>🐞 Debug</h2><p>I have set up a behavior such that Xcode switches to the debug tab when running starts. The behavior automatically selects the debug navigator and shows the variable and console view of the debugger. This way Xcode shows all the information I need to debug problems when they occur.</p><img src="../../assets/2020-04-25/running_starts_behavior.png"/><h2>💾 Build</h2><p>The build tab used to show the log of the build. I have a behavior that show the build log when the build starts. Unfortunately Apple broke that behavior with Xcode 10 and still haven't fixed it (FB7675730). As long as the behavior is broken, this tab shows the report navigator and I can select the build log myself if I need to.</p><img src="../../assets/2020-04-25/build_tab.png"/><h2>Bookmarks</h2><p>In addition to that I also use tabs when I navigate through code I don't know or understand to keep track of important classes. So in a way I sometimes use tabs as bookmarks.</p><p>Do you use tabs? Why not? Do you have other comments on this post? Let me know on Twitter: <a href="https://twitter.com/dasdom">@dasdom</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/quick-tip-accessibility-zoom</guid><title>Quick Tip: Accessibility Zoom to Debug Layout</title><description>Sometimes during the development of an iOS app, we need to figure out, how many pixels are between two views. macOS has accessibility featues build in that help with this task.</description><link>https://dasdom.dev/posts/quick-tip-accessibility-zoom</link><pubDate>Fri, 17 Apr 2020 12:23:00 +0200</pubDate><content:encoded><![CDATA[<h1>Quick Tip: Accessibility Zoom to Debug Layout</h1><p>Sometimes during the development of an iOS app, you need to figure out, how many pixels are between two views.</p><p>Let's say you have an image view and a label underneath it. In interface builder you can select the image view, press and hold the ⌥ key and hover with the mouse pointer over the label. The interface builder shows you the distance in points between the two view like shown in the following image:</p><img src="../../assets/2020-04-17/distance_in_interface_builder.png"/><p>But this is the distance between the label and the image view. What if we need to figure out the distance between text in the label and the image.</p><p>In this case we can use a third party tool like xScope as we did in <a href="../cgaffinetransform-and-auto-layout/">CGAffineTransform and Auto Layout</a>. But even without such a tool, we can count the pixels. Here is how.</p><p>First set the window of the simulator to Point Accurate like shown in this image:</p><img src="../../assets/2020-04-17/point_accurate_setting.png"/><p>Next open the Accessibility settings of your Mac and select Zoom in the menu on the left. Check the check box at 'Use scroll gesture with modifier keys to zoom' and select a modifier key. I use the control key:</p><img src="../../assets/2020-04-17/accessibility_zoom_setting.png"/><p>When you now press and hold that modifier key and perform a scroll gesture on your track pad or using the mouse, the screen zooms. You can change the zoom style to what fits you preferences best. But to be able to count pixels, we need to change another setting. Click the Advanced button and uncheck the check box 'Smooth images':</p><img src="../../assets/2020-04-17/smooth_image_setting.png"/><p>Now you can zoom into the part you are interested in and count pixels. Unfortunately I couldn't figure out how to create a screenshot with the zoom enabled. So you need to try this yourself.</p><p>If you have any comments on that post, you can find my on Twitter as <a href="https://twitter.com/dasdom">@dasdom</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/cgaffinetransform-and-auto-layout</guid><title>CGAffineTransform and Auto Layout</title><description>Be careful when using CGAffineTransform with Auto Layout.</description><link>https://dasdom.dev/posts/cgaffinetransform-and-auto-layout</link><pubDate>Sat, 11 Apr 2020 12:23:00 +0200</pubDate><content:encoded><![CDATA[<h1>CGAffineTransform and Auto Layout</h1><p>This week at work I had a strange bug in an iOS app. It looked like something was wrong with the Auto Layout constraints. The following screenshot shows a simplified version of the user interface.</p><img src="../../assets/2020-04-11/user_interface_with_wrong_spacing.png"/><p>In the storyboard the distance between the image and the label was defined as 10 points as you can see in the following screenshot:</p><img src="../../assets/2020-04-11/space_constraint_in_interface_builder.png"/><p>But when running the app on the simulator or on a real device the space between the image and the label was much larger than 10 points. To figure out the real distance, I set the window of the simulator to Point Accurate.</p><img src="../../assets/2020-04-11/point_accurate_setting.png"/><p>With this setting the number of pixels on the Mac display correspond to the points in the user interface. To count the number of pixels, we can scale the Mac display using the zoom accessibility feature or we can use 3rd-party tool. A great tool for such a task is <a href="https://xscopeapp.com">xScope</a>. Using xScope, I measure a distance of 29 points.</p><img src="../../assets/2020-04-11/real_distance_measured.png"/><p>The real user interface was more complex than that. The image view was a custom <code>UIView</code> subclass defined in a Xib, containing several instances of <code>UIImageView</code>. Because of that complexity and a few other problems in the storyboard, it took me about an hour to finally get the idea to look into the code of the host view. And there I found a line like this:</p><pre><code>imageView.<span class="property">transform</span> = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">0.8</span>, y: <span class="number">0.8</span>)
</code></pre><p>The previous developer working on that code used an <code>CGAffineTransform</code> instead of layout constraints to make the image view smaller. I guess the reason for this decision was, that in the Xib of the composed view, one of the image views had a fixed width. And because of time constraints, using a transform might be the faster solution to his problem.</p><p>To solve the layout problem, I added size constraints to the image view and fixed the constraints in the Xib.</p><p>As a side note, I learned during the investigation that an affine transform on a view changes the frame but not the bounds:</p><img src="../../assets/2020-04-11/bounds_not_transformed.png"/><p>That might be common sense and completely obvious to you, but is was new to me. :)</p><p>If you have any comments on that post, you can find my on Twitter as <a href="https://twitter.com/dasdom">@dasdom</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/simulate-gps-location-updates-in-simulator</guid><title>Simulating GPS Location Updates in the iOS Simulator</title><description>Add a gpx file to your Xcode project to simulate timed location changes in the iOS simulator.</description><link>https://dasdom.dev/posts/simulate-gps-location-updates-in-simulator</link><pubDate>Sat, 4 Apr 2020 12:23:00 +0200</pubDate><content:encoded><![CDATA[<h1>Simulating GPS Location Updates in the iOS Simulator</h1><p>Sometimes when building an iOS app you need to simulate moving around. Let's say, for example, you create an app that allows the users to draw their movement onto a map. It would be difficult to move around with your iOS device connected to Xcode to debug your code.</p><p>Fortunately the iOS simulator can simulate location changes as if the user would do a city run or a free way drive.</p><h2>Simulating a City Run Around Cupertino</h2><p>Build and run your app on the iOS simulator and select the menu item <em>Features / Location / City Run</em>.</p><img src="../../assets/2020-04-04/simulate_city_run.png"/><p>The simulator delivers location updates as if the device would move during a city run around Cupertino. But sometimes you need more.</p><h2>Simulating a Specific Path</h2><p>If you need to simulate a specific path, you can add a gpx file to the project and select this in Xcode when the app runs in the simulator. Such a gpx file could look like this:</p><pre><code>&lt;?xml version=<span class="string">"1.0"</span>?&gt;
&lt;gpx version=<span class="string">"1.1"</span> creator=<span class="string">"GPXRouteCreator"</span>&gt;
  &lt;wpt lat=<span class="string">"51.24254280000747"</span> lon=<span class="string">"6.769857406333074"</span>&gt;
    &lt;time&gt;<span class="number">2020</span>-<span class="number">02</span>-28T09:<span class="number">12</span>:35Z&lt;/time&gt;
  &lt;/wpt&gt;
  &lt;wpt lat=<span class="string">"51.24262905838532"</span> lon=<span class="string">"6.76984702684905"</span>&gt;
    &lt;time&gt;<span class="number">2020</span>-<span class="number">02</span>-28T09:<span class="number">12</span>:37Z&lt;/time&gt;
  &lt;/wpt&gt;
&lt;/gpx&gt;
</code></pre><p>Each point in this gpx file defines a latitude and a longitude and an optional time. When using a gpx file with time values the simulator uses the time difference between those points to simulate the movement. The shorter the time difference between two points is, the faster the simulated movement.</p><p>Add the gpx file to the project and run your app on the simulator. In the debug bar in Xcode click the location icon and select the file you added to the project. In this example here I named the file <code>track.gpx</code>.</p><img src="../../assets/2020-04-04/select_gpx_file.png"/><p>When the simulator reaches the last point in the gpx file, it starts at the beginning again.</p><h2>Creating GPX Files</h2><p>You can write the gpx files you need yourself, or you can use <a href="https://github.com/dasdom/GPXRouteCreator">the open source app</a> I build for my own needs. Its a SwiftUI Catalyst app, so there are a few rough edges. But it can create gpx files.</p><p>Let me know what you think.</p><p>Follow me on <a href="https://twitter.com/dasdom">Twitter</a>.<br>Check out my open source code at <a href="https://github.com/dasdom">Github</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/grand-central-dispach-timer</guid><title>Grand Central Dispatch Timer</title><description>How to build a timer that works on a background thread.</description><link>https://dasdom.dev/posts/grand-central-dispach-timer</link><pubDate>Wed, 12 Feb 2020 12:53:00 +0100</pubDate><content:encoded><![CDATA[<h1>Grand Central Dispatch Timer</h1><p>Last week I needed to fire a timer on a background thread. You can do this with a <code>Timer</code> that is added to a run loop on a background thread.</p><p>Here is a different approach using Grand Central Dispatch. This method returns a timer that fires on a background thread.</p><pre><code><span class="keyword">func</span> gcdTimer(delay: <span class="type">DispatchWallTime</span> = .<span class="call">now</span>(),
              repeating: <span class="type">DispatchTimeInterval</span> = .<span class="dotAccess">never</span>,
              leeway: <span class="type">DispatchTimeInterval</span> = .<span class="call">milliseconds</span>(<span class="number">100</span>),
              action: <span class="keyword">@escaping</span> ()-&gt;<span class="type">Void</span>) -&gt; <span class="type">DispatchSourceTimer</span> {
  
  <span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"de.dasdom.my.queue"</span>)
  <span class="keyword">let</span> timer = <span class="type">DispatchSource</span>.<span class="call">makeTimerSource</span>(queue: queue)
  timer.<span class="call">schedule</span>(wallDeadline: delay, repeating: repeating, leeway: leeway)
  timer.<span class="call">setEventHandler</span>(handler: action)
  timer.<span class="call">resume</span>()
  <span class="keyword">return</span> timer
}
</code></pre><p>First we create a <code>DispatchQueue</code>. With this queue we create a <code>DispatchSourceTimer</code>. In the next line we schedule the timer using a delay, a repeating interval and a leeway. The leeway gives the system some flexibility in how it manages the system resources. Next we add the action that should be executed when the timer fires. Don't forget to call <code>resume()</code> on the timer.</p><p>To invalidate the timer call <code>cancel()</code> on it.</p><p>That's it. This is a timer that fires on a background thread.</p><p>I thought about putting that into a Swift Package. But that felt a lot like <a href="https://www.theregister.co.uk/2016/03/23/npm_left_pad_chaos/">leftpad</a>. So I wrote a blog post about it to find it again when I need it.</p><p>Follow me on <a href="https://twitter.com/dasdom">Twitter</a>.<br>Check out my open source code at <a href="https://github.com/dasdom">Github</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/using-breakpoints-to-populate-with-demo-data</guid><title>Using breakpoints to populate with demo data</title><description>Breakpoints can do many useful things. Here is how to use breakpoints to populate the app with demo data while debugging.</description><link>https://dasdom.dev/posts/using-breakpoints-to-populate-with-demo-data</link><pubDate>Sat, 25 Jan 2020 12:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Using breakpoints to populate with demo data</h1><p>Often during development, you need to populate the view controller with demo data. One solution is to change the code to use dummy data. But this means you have to change the code and remember to change it back when done.</p><p>I often use a breakpoint for this. Using the keyword <code>e</code> (short for <code>expression</code>) you can execute code when the debugger hits the breakpoint.</p><p>Let's say we have a table view showing users. With the following lldb command we can add a user object to the <code>users</code> array in a breakpoint in <code>viewDidLoad</code>.</p><pre><code>e users.<span class="call">append</span>(<span class="type">User</span>(name: <span class="string">"Bla"</span>, birthdate: <span class="type">Date</span>()))
</code></pre><p>You can even split the creation and the appending in two debugger commands like shown in the following screenshot.</p><img src="../../assets/2020-01-25/breakpoint_to_populate.png"/><p>Make sure that you check the box at <em>Automatically continue after evaluating actions</em>. Otherwise the debugger will stop at that breakpoint and you have to continue yourself.</p><p>Follow me on <a href="https://twitter.com/dasdom">Twitter</a>.<br>Check out my open source code at <a href="https://github.com/dasdom">Github</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/a-breakpoint-i-cannot-live-without</guid><title>A breakpoint I cannot live without</title><description>How to add a breakpoint in Xcode that prints the currely visible view controller to the console.</description><link>https://dasdom.dev/posts/a-breakpoint-i-cannot-live-without</link><pubDate>Sat, 18 Jan 2020 12:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>A breakpoint I cannot live without</h1><p>I'm often working on projects from other devs. Some of the projects are quite complicated and I have difficulties to remember all the view controllers. Here is a breakpoint that helps me a lot when figuring out what's going on and where I need to fix a bug.</p><p>The breakpoint prints the class name of the current view controller to the console. It's a symbolic breakpoint on <code>-[UIViewController viewDidAppear:]</code> with the debugger command <code>po $arg1</code>.</p><p>To have the breakpoint in all projects, move it to the User. This can be done by Crl click on the breakpoint and selecting <em>Move Breakpoint To / User</em>.</p><img src="../../assets/2020-01-18/move_breakpoint_to_user.png"/><p>Follow me on <a href="https://twitter.com/dasdom">Twitter</a>.<br>Check out my open source code at <a href="https://github.com/dasdom">Github</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/search-and-replace-in-xcode</guid><title>Search and Replace in Xcode</title><description>Did you know that you can use regular expressions in search and replace in Xcode?</description><link>https://dasdom.dev/posts/search-and-replace-in-xcode</link><pubDate>Sun, 25 Aug 2019 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Search and Replace in Xcode</h1><p>Recently I took the regex course at <a href="https://www.executeprogram.com/">executeprogram.com</a>. Awesome stuff.</p><p>As you know, as soon as you have a slight idea what regex is, you try to use it everywhere. Yesterday I needed to change all strings of double values in a JSON into double values. For example I wanted to replace <code>"1.23"</code> with <code>1.23</code>.</p><h1>Regex without the <code>\d+.*?\w</code></h1><p>If you don't know regular expressions but still need more than just replace a simple string with another simple string, Xcode has you covered.</p><p>As an example lets say we'd like to change all the properties in the following struct into optionals:</p><pre><code><span class="keyword">struct</span> ChemElement : <span class="type">Codable</span>, <span class="type">Equatable</span> {
  <span class="keyword">let</span> abbreviation: <span class="type">String</span>
  <span class="keyword">let</span> atomMass: <span class="type">Double</span>
  <span class="keyword">let</span> electronConfiguration: <span class="type">String</span>
  <span class="keyword">let</span> group: <span class="type">String</span>
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">let</span> ordinal: <span class="type">Int</span>
  <span class="keyword">let</span> period: <span class="type">Int</span>
  <span class="keyword">let</span> yPos: <span class="type">Int</span>
  <span class="keyword">let</span> title: <span class="type">String</span>
  <span class="keyword">let</span> pauling: <span class="type">String</span>
  <span class="keyword">let</span> mostImportantRadioactiveIsotope: <span class="type">Int</span>
  <span class="keyword">let</span> decayType: <span class="type">String</span>
  <span class="keyword">let</span> lifetime: <span class="type">String</span>
  <span class="keyword">let</span> phaseNorm: <span class="type">String</span>
  <span class="keyword">let</span> crystalStructure: <span class="type">String</span>
}
</code></pre><p>(Please don't judge this code. I'm still refactoring. ;) )</p><p>We activate search with ⌘-f. In the search bar is a plus sign. When you click it, you can select different elements to search for. The patterns we need is <code>let Word: Word</code>. The matching substrings are highlighted in the editor:</p><img src="../../assets/2019-08-25/search-result-without-regex.png"/><p>If you look closely you can see there is a small number next to the pattern elements:</p><img src="../assets/2019-08-25/search-result-without-regex-detail.png"/><p>In the <code>Replace</code> text field you can refer to the different matches using a <code>$</code> sign and the number next to the pattern part like this: <code>var $1: $2?</code>. In Xcode this looks like this:</p><img src="../../assets/2019-08-25/search-result-without-regex-detail-replace.png"/><p>When we now click the <code>All</code> button, all the properties are changed into optional properties:</p><pre><code><span class="keyword">struct</span> ChemElement : <span class="type">Codable</span>, <span class="type">Equatable</span> {
  <span class="keyword">var</span> abbreviation: <span class="type">String</span>?
  <span class="keyword">var</span> atomMass: <span class="type">Double</span>?
  <span class="keyword">var</span> chemieBool: <span class="type">Bool</span>?
  <span class="keyword">var</span> electronConfiguration: <span class="type">String</span>?
  <span class="keyword">var</span> group: <span class="type">String</span>?
  <span class="keyword">var</span> name: <span class="type">String</span>?
  <span class="keyword">var</span> ordinal: <span class="type">Int</span>?
  <span class="keyword">var</span> period: <span class="type">Int</span>?
  <span class="keyword">var</span> yPos: <span class="type">Int</span>?
  <span class="keyword">var</span> title: <span class="type">String</span>?
  <span class="keyword">var</span> pauling: <span class="type">String</span>?
  <span class="keyword">var</span> mostImportantRadioactiveIsotope: <span class="type">Int</span>?
  <span class="keyword">var</span> decayType: <span class="type">String</span>?
  <span class="keyword">var</span> lifetime: <span class="type">String</span>?
  <span class="keyword">var</span> phaseNorm: <span class="type">String</span>?
  <span class="keyword">var</span> crystalStructure: <span class="type">String</span>?
}
</code></pre><h1>Search using regular expressions</h1><p>If you know regular expressions you can activate it in search by clicking the drop down that shows <code>Contains</code> and change it into <code>Regular Expression</code>:</p><img src="../../assets/2019-08-25/activate-regular-expression-in-search.png"/><p>Than you can use regular expressions when searching:</p><img src="../../assets/2019-08-25/search-with-regex.png"/><p>But if you'd like to use matches in <code>Replace</code> like you did above you need to add parentheses like this:</p><img src="../../assets/2019-08-25/search-and-replace-with-regex.png"/><p><strong>Thanks for reading!</strong></p><p>If you have comments about this or in case I missed something, you can find me on <a href="https://twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/dynamic-type-in-uibuttons</guid><title>Dynamic Type in UIButtos</title><description>How to add support for dynamic type to regular UIButtos.</description><link>https://dasdom.dev/posts/dynamic-type-in-uibuttons</link><pubDate>Fri, 9 Aug 2019 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Dynamic Type in UIButtos</h1><p>Recently I updated my formulary app after three years of absence from the App Store. Now I try to make it the best formulary app in the App Store again. The best formulary app in 2019 needs to support dynamic type.</p><p>One of the main features of my formulary app is the calculator. For the update I rewrote the UI from scratch using <code>UIButton</code>s and <code>UIStackView</code>s. For the next update I wanted the calculator to support dynamic type. But the naïve approach didn't work.</p><h1>The Naïve Approach</h1><p><code>UIButton</code> has a <code>UILabel</code> subview to hold the title. To set the font of the button you need to set the font of that label.</p><pre><code><span class="keyword">let</span> button = <span class="type">UIButton</span>(type: .<span class="dotAccess">system</span>)
button.<span class="property">titleLabel</span>?.<span class="property">font</span> = .<span class="call">preferredFont</span>(forTextStyle: .<span class="dotAccess">body</span>)
button.<span class="property">titleLabel</span>?.<span class="property">adjustsFontForContentSizeCategory</span> = <span class="keyword">true</span>
</code></pre><p>The last line tells UIKit that the font should be changed whenever the user changes the text size in settings or from Control Center. If the font is changed from small to huge while the app is running, the result looks like this (I added a border around the label for clarification):</p><img src="../../assets/2019-08-09/button_font_small.png" alt="Before the font change"/><img src="../../assets/2019-08-09/button_font_huge.png" alt="After the font change"/><p>So this doesn't work.</p><p>To make dynamic type work in a UIButton, I needed to add a strange hack to a UIButton subclass.</p><h1>Custom Subclass</h1><p>The resizing of the title label works if I use a subclass of <code>UIButton</code> that looks like this:</p><pre><code><span class="keyword">@implementation</span> <span class="type">CalculatorButton</span>

- (void)traitCollectionDidChange:(<span class="type">UITraitCollection</span> *)<span class="call">previousTraitCollection</span> {
  
  <span class="type">NSString</span> *text = <span class="keyword">self</span>.<span class="property">currentTitle</span>;
  
  [<span class="keyword">self</span> setTitle:<span class="keyword">nil</span> forState:<span class="type">UIControlStateNormal</span>];
  [<span class="keyword">self</span> setTitle:text forState:<span class="type">UIControlStateNormal</span>];
}
<span class="keyword">@end</span>
</code></pre><p>If you have any feedback you can find me on <a href="https://twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/phy-update</guid><title>Phy Update</title><description>10 years after it's first appearance in the App Store I finally submitted an update for my first app.</description><link>https://dasdom.dev/posts/phy-update</link><pubDate>Thu, 1 Aug 2019 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Phy Update</h1><p>tl;dr: I put an update of <a href="https://apps.apple.com/de/app/phy-physics-formulas-and-calculator/id325836855?l=en">my first app</a> to the App Store. 10 years after it first got approved.</p><h1>Story Time</h1><p>10 years ago my first app got approved in the App Store. This changed my life.</p><p>At the time I worked at the university as a physics teacher. And I needed a physics formulary on my new iPod touch. There is an app for that, right? There had been formulary apps in the App Store. But they didn't fit my needs. So I tried to build my own.</p><p>Back in the days apps had been written in Objective-C (ObjC). So I tried to learn ObjC and failed. A few month later I met a former colleague who showed me his app in the App Store, a rain radar.</p><p>I thought, if he can do it, <em>I</em> can do it. This time I bought a book about development of iPhoneOS apps. Fortunately an example project in the book was kind of what I liked to build. From that example I hacked the first version of my formulary.</p><p>And with hacked I really mean hacked. The example in the book only had one view controller for a list of items stored in a plist. I needed several lists. So I put all the code for all the lists in that one view controller. This was my first massive view controller. I guess creating a massive view controller is some kind of initiation ceremony.</p><p>Then it was time to put it into the world by submitting it to the App Store. All good names had already been taken and I'm really bad in naming stuff. So I chosed the name Phy. As expected a bad name. :D Strangely enough the app was successful. I made a lot of money from it. At least for my standards. (The best month was about $1500 before taxes.)</p><h1>Changing Careers</h1><p>I loved my job as a physics teacher. But it bugged me that I only could code in my spare time. What if I could write code 8 hours a day and get paid for it. That would be awesome!</p><p>My girlfriend lived in an other city and we finally decided to move in together. I applied for different jobs related to teaching physics but also for a few job offers as iPhoneOS developer.</p><p>Luckily I got an interview with a small agency creating apps for other companies. I proudly showed my formulary in the interview and got the job. Mainly because there was no one else who could write apps for iPhone and iPad. I'm very thankful for this opportunity especially as I know to day how bad my code was at that time.</p><h1>What Happened To Phy</h1><p>Years went by and Phy started to look bad on new iPhones. I tried to rewrite it from scratch several times but lost interest early each and every time. And finally a few years ago I had to pull it from the App Store because of the quality initiative by Apple.</p><p>Last year I decided to try to get it back to the App Store. But this time I used the old and really bad ObjC code. I fixed the bugs I knew of and rewrote some view controllers using ObjC.</p><p>This time I made it! I got Phy into a state where it could be resubmitted to the App Store.</p><h1>The Special App</h1><p>Phy is special for me. It made me a developer. The code was (and partly is) really really bad. But this is not that important. It allowed me to become an iOS developer. Today I'm able to support my family by coding ObjC and Swift. That is awesome!</p><h1>What I Learn From The Update</h1><p>Nice and clean code doesn't count much if you don't finish it. Sometimes it's easier to work with what you have. Bad working ObjC code is better than Swift 2 code not compiling anymore because it's older than 2 years.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/testing-presentation-of-a-view-controller</guid><title>Testing The Presentation Of A View Controller</title><description>It's quite easy to test if a view controller is presented on screen after some action. Here is how this works.</description><link>https://dasdom.dev/posts/testing-presentation-of-a-view-controller</link><pubDate>Tue, 2 Apr 2019 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Testing The Presentation Of A View Controller</h1><blockquote><p>I'm writing <a href="https://leanpub.com/tddfakebookforios">a book about Test-Driven iOS Development</a> with Swift. It's not a traditional book, it's mainly only the code. If you are like me and seldom read blog posts but rather skim for the code, this book is for you.</p></blockquote><p>Let's say we need to test if an action triggers the presentation of a view controller. The test looks like this:</p><pre><code><span class="keyword">func</span> test_presentationOfViewController() {
  <span class="comment">// Arrange</span>
  <span class="keyword">let</span> window = <span class="type">UIWindow</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">300</span>, height: <span class="number">300</span>))
  <span class="comment">// sut == system under test</span>
  window.<span class="property">rootViewController</span> = sut
  window.<span class="call">makeKeyAndVisible</span>()
    
  <span class="comment">// Act</span>
  sut.<span class="call">showNext</span>()
    
  <span class="comment">// Assert</span>
  <span class="call">XCTAssertTrue</span>(sut.<span class="property">presentedViewController</span> <span class="keyword">is</span> <span class="type">DetailViewController</span>)
}
</code></pre><p>First we have to set the view controller (<code>sut</code>) that presents the other view controller as the <code>rootViewController</code> of a window. Then we need to make the window the key window. This way, the view of the view controller is added to the view hierarchy. If we miss the step, no other view controller can be presented on top of that view controller.</p><p>Next the presentation is triggered. How this is done, depends on the code under test. For simplicity, I assume that there is a method <code>showNext()</code> that triggers the presentation.</p><p>In the end we assert that the presented view controller has the expected type. Depending on the presented view controller, we could also assert that an expected item (user, point of interest, tweet, etc) has been passed to it.</p><p>That's all. Straight forward. The tricky part is to remember to add the view controller under test as the root view controller to a window and make the window the key window.</p><p>Follow me on <a href="https://www.twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/easy-unit-tests-in-ios-development</guid><title>Easy Unit Tests In iOS Development</title><description>Starting with unit tests is not hard. Here are some easy tests you can add to your project right now.</description><link>https://dasdom.dev/posts/easy-unit-tests-in-ios-development</link><pubDate>Sat, 16 Mar 2019 12:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>Easy Unit Tests In iOS Development</h1><p>Testing is hard. That's why it's not done enough in iOS development. When I ask other developers, many don't write unit tests at all. That's no good. Unit tests are an essential tool to build high quality iOS apps and allow disruptive refactoring without breaking functionalities.</p><p>The main advantages of writing unit tests are: 1. The code becomes refactorable. 2. Testable code usually is better code. So when you are "forced" to write code, your code automatically becomes better. 3. It's less likely to introduce regression into code with a good test coverage. 4. Writing the tests first often makes implementing a new feature easier because you intentionally make very small steps. 5. Tests are a living documentation. With living I mean, it's less likely that they get asynchronous to the actual code as it often happens to traditional documentation on some website.</p><p>OK, tests are good and important. Let's assume you are willing to start writing tests for your code. How do you start? The most important thing is to write the first test. So here are some easy tests you can introduce to you code right now. Let's get started.</p><h2>Test That A Property Was Set</h2><p>Let's say we have a <code>User</code> struct with a <code>firstname</code> and a <code>lastname</code>:</p><pre><code><span class="keyword">struct</span> User {
  <span class="keyword">var</span> firstname: <span class="type">String</span> = <span class="string">""</span>
  <span class="keyword">var</span> lastname: <span class="type">String</span> = <span class="string">""</span>
}
</code></pre><p>Now we need a property <code>name</code> that is <code>firstname</code> and <code>lastname</code> with space in between.</p><p>We will add that feature using Test-Diven Development (TDD). In TDD you write the test before you add the code to be testet. It sounds strange but after you got used to it, this totally makes sense. We assume the project already has a test target. (If this is not the case, just add a test target.)</p><p>Now the test for the feature we are going to build:</p><pre><code><span class="keyword">import</span> XCTest
<span class="keyword">@testable import</span> MyApp

<span class="keyword">class</span> PropertyTests : <span class="type">XCTestCase</span> {
  
  <span class="keyword">var</span> sut: <span class="type">User</span>!
  
  <span class="keyword">override func</span> setUp() {
    sut = <span class="type">User</span>()
  }
  
  <span class="keyword">override func</span> tearDown() {
    sut = <span class="keyword">nil</span>
  }
  
  <span class="keyword">func</span> test_name_property() {
    <span class="comment">// Arrange

    // Act</span>
    sut.<span class="property">firstname</span> = <span class="string">"Foo"</span>
    sut.<span class="property">lastname</span> = <span class="string">"Bar"</span>
    
    <span class="comment">// Assert</span>
    <span class="call">XCTAssertEqual</span>(sut.<span class="property">name</span>, <span class="string">"Foo Bar"</span>)
  }
}
</code></pre><p>Try running the test with the shortcut ⌘U. The test does not compile because <code>User</code> doesn't have a property named <code>name</code>. A not compiling test is a failing test. Let's add enough code to make it compile.</p><pre><code><span class="keyword">struct</span> User {
  <span class="keyword">var</span> firstname: <span class="type">String</span> = <span class="string">""</span>
  <span class="keyword">var</span> lastname: <span class="type">String</span> = <span class="string">""</span>
  <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">""</span>
}
</code></pre><p>Again run the test with ⌘U. Now the test compiles but if fails. This is a good sign because we haven't implemented the code we like to test. If the test would pass before we have implemented the feature, probably the test would pass all the time and would therefore be useless.</p><p>When we change the <code>User</code> struct to the following the test passes:</p><pre><code><span class="keyword">struct</span> User {
  <span class="keyword">var</span> firstname: <span class="type">String</span> = <span class="string">""</span> {
    <span class="keyword">didSet</span> {
      <span class="call">updateName</span>(firstname: firstname,
                 lastname: lastname)
    }
  }
  <span class="keyword">var</span> lastname: <span class="type">String</span> = <span class="string">""</span> {
    <span class="keyword">didSet</span> {
      <span class="call">updateName</span>(firstname: firstname,
                 lastname: lastname)
    }
  }
  <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">""</span>
  
  <span class="keyword">private mutating func</span> updateName(firstname: <span class="type">String</span>, lastname: <span class="type">String</span>) {
    
    name = <span class="string">"</span>\(firstname) \(lastname)<span class="string">"</span>
  }
}
</code></pre><p>If you run the test again, you'll see that it now passes. Awesome! We just used Test-Driven Development to add a feature to the <code>User</code> struct.</p><p>If you want to learn more about TDD and how to test many different scenarios in iOS development, I'm writing a book about that. It's still im progress, but you can already get it at <a href="https://leanpub.com/tddfakebookforios">leanpub</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/uistackviewplayground</guid><title>UIStackViewPlayground</title><description>UIStackViews are quite powerful. I wrote a Playground to play arround with it.</description><link>https://dasdom.dev/posts/uistackviewplayground</link><pubDate>Tue, 25 Dec 2018 12:00:00 +0100</pubDate><content:encoded><![CDATA[<h1>UIStackViewPlayground</h1><p>UIStackView was introduces with iOS 9. And from the beginning I loved it. UIStackViews allow to use Auto Layout without adding Auto Layout Constraints. And most of the times you get away with changing a few properties to achieve what you want. You need some time to get used to it though. So back when a beta of iOS 9 was available I created an <a href="https://github.com/dasdom/UIStackViewPlayground">Xcode Playground</a> to experiment with the new and shiny UIStackViews.</p><p>First I did some easy layouts like a calculator and a simple Twitter feed. But later I tried to recreate the look of the springboard with UIStackViews. Here is the result:</p><img src="../../assets/2018-12-25/01.png"/><p>Each App (the icon together with the title) is one stack view.</p><pre><code><span class="keyword">let</span> appStackView = { (imageName: <span class="type">String</span>, title: <span class="type">String</span>) -&gt; <span class="type">UIStackView</span> <span class="keyword">in
    
    let</span> imageView = <span class="type">UIImageView</span>(image: <span class="type">UIImage</span>(named: imageName))
    imageView.<span class="property">widthAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">60</span>).<span class="property">isActive</span> = <span class="keyword">true</span>
    imageView.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">60</span>).<span class="property">isActive</span> = <span class="keyword">true
        
    let</span> subviews = [imageView, <span class="call">labelWithText</span>(title)]
    <span class="keyword">let</span> stackView = <span class="type">UIStackView</span>(arrangedSubviews: subviews)
    stackView.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
    stackView.<span class="property">distribution</span> = .<span class="dotAccess">equalSpacing</span>
    stackView.<span class="property">spacing</span> = <span class="number">3</span>
    <span class="keyword">return</span> stackView
}

<span class="keyword">let</span> calendarStackView = <span class="call">appStackView</span>(<span class="string">"calendar"</span>, <span class="string">"Calendar"</span>)
<span class="keyword">let</span> photosStackView = <span class="call">appStackView</span>(<span class="string">"photos"</span>, <span class="string">"Photos"</span>)
<span class="keyword">let</span> mapsStackView = <span class="call">appStackView</span>(<span class="string">"maps"</span>, <span class="string">"Maps"</span>)
<span class="keyword">let</span> remindersStackView = <span class="call">appStackView</span>(<span class="string">"notes"</span>, <span class="string">"Reminders"</span>)
<span class="keyword">let</span> healthStackView = <span class="call">appStackView</span>(<span class="string">"health"</span>, <span class="string">"Health"</span>)
<span class="keyword">let</span> settingsStackView = <span class="call">appStackView</span>(<span class="string">"settings"</span>, <span class="string">"Settings"</span>)
<span class="keyword">let</span> safariStackView = <span class="call">appStackView</span>(<span class="string">"safari"</span>, <span class="string">"Safari"</span>)
</code></pre><p>The Calendar and the Health app are together a stack view as well as Photos and Settings.</p><pre><code><span class="keyword">let</span> columnStackView = { (views: [<span class="type">UIView</span>]) -&gt; <span class="type">UIStackView</span> <span class="keyword">in
    let</span> stackView = <span class="type">UIStackView</span>(arrangedSubviews: views)
    stackView.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
    stackView.<span class="property">spacing</span> = <span class="number">10</span>
    stackView.<span class="property">distribution</span> = .<span class="dotAccess">fillEqually</span>
    <span class="keyword">return</span> stackView
}

<span class="keyword">let</span> firstColumnStackView = <span class="call">columnStackView</span>([calendarStackView,
                                            healthStackView])
<span class="keyword">let</span> secondColumnStackView = <span class="call">columnStackView</span>([photosStackView,
                                             settingsStackView])
</code></pre><p>The first two columns with apps and the two other apps are put into another stack view:</p><pre><code><span class="keyword">let</span> appsStackView = <span class="type">UIStackView</span>(arrangedSubviews: [firstColumnStackView,
                                                   secondColumnStackView,
                                                   mapsStackView,
                                                   remindersStackView])
appsStackView.<span class="property">distribution</span> = .<span class="dotAccess">fillEqually</span>
appsStackView.<span class="property">alignment</span> = .<span class="dotAccess">top</span>
appsStackView.<span class="property">spacing</span> = <span class="number">15</span>
</code></pre><p>Safari is in a stack view and together with the page control it's put into another stack view. The stack view with the apps is put into another stack view together with the time label:</p><pre><code><span class="keyword">let</span> topStackView = <span class="type">UIStackView</span>(arrangedSubviews: [timeLabel, appsStackView])
topStackView.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
topStackView.<span class="property">spacing</span> = <span class="number">5</span>
</code></pre><p>And then the top stack view is put into another stack view together with the info label and the stack view at the bottom with Safari and the page control. And this last stack view is added to the view as a sub view and it is arranged using normal Auto Layout Constraints.</p><pre><code><span class="keyword">let</span> mainStackView = <span class="type">UIStackView</span>(arrangedSubviews: [topStackView, infoLabel, safariColumnStackView])
mainStackView.<span class="property">translatesAutoresizingMaskIntoConstraints</span> = <span class="keyword">false</span>
mainStackView.<span class="property">axis</span> = .<span class="dotAccess">vertical</span>
mainStackView.<span class="property">distribution</span> = .<span class="dotAccess">equalSpacing</span>
mainStackView.<span class="property">alignment</span> = .<span class="dotAccess">center</span>

hostView.<span class="call">addSubview</span>(dockBackgroundView)
hostView.<span class="call">addSubview</span>(mainStackView)

<span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>(
  [
    mainStackView.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">leadingAnchor</span>),
    mainStackView.<span class="property">trailingAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">trailingAnchor</span>),
    mainStackView.<span class="property">topAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">topAnchor</span>, constant: <span class="number">3</span>),
    mainStackView.<span class="property">bottomAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">bottomAnchor</span>, constant: -<span class="number">3</span>),

    dockBackgroundView.<span class="property">leadingAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">leadingAnchor</span>),
    dockBackgroundView.<span class="property">trailingAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">trailingAnchor</span>),
    dockBackgroundView.<span class="property">bottomAnchor</span>.<span class="call">constraint</span>(equalTo: hostView.<span class="property">bottomAnchor</span>),
    dockBackgroundView.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">95</span>),
  ]
)
</code></pre><p>As you can see in this post, stack views become very powerful when you nest them. So, stack all the things!</p><p>Follow me on <a href="https://twitter.com/dasdom">Twitter</a> and browse through my other open source stuff on <a href="https://github.com/dasdom">Github</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/swiftconf-2018-sketch-notes</guid><title>SwiftConf 2018 - Sketch Notes</title><description>SwiftConf was great as always. Here are my sketch notes.</description><link>https://dasdom.dev/posts/swiftconf-2018-sketch-notes</link><pubDate>Sun, 23 Sep 2018 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>SwiftConf 2018 - Sketch Notes</h1><p>This year I was able to attend only one conference. And this conference was <a href="https://swiftconf.com/">SwiftConf</a>. I do sketch notes to keep concentrated while listening. I'm not good at this but nevertheless it helps me a lot to recall the talk later.</p><p>And it's a good way to give feedback to the speaker.</p><h1>Day 1</h1><h2>Keynote – Stabilizing your ABI</h2><p><a href="https://twitter.com/dimsumthinking">Daniel Steinberg</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>The focus of Swift 5 is ABI stabilization. This is a big moment in the evolution of this language we depend so much on. We begin this year’s Swift Conf with a look at what ABI Stabilization means in the life of the Swift Programming Language and what it could mean in your life.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/01.jpg"/><hr><hr><h2>Always Give 100%</h2><p><a href="https://twitter.com/KubaTurek">Jakub Turek</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>The talk is about unit testing and developing iOS apps in TDD with Swift. It will cover a plethora of tips and techniques that me and the team has discovered en route to the app with 200K lines of Swift at nearly 100% code coverage. The talk will highlight the techniques of structuring the code so that it is easily testable. It will demonstrate how to overcome common pain points, such as testing view controllers or the test-first approach for views built entirely in code. It will also show how to refactor the test code for better readability, for example using Sourcery code generation tool. It doesn't matter whether you have never written a single test case or are a veteran looking to push the testing to the limit. If you are like me and want the days of debugging through piles of unmaintainable code to be over, this talk is definitely for you!</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/02.jpg"/><hr><hr><h2>The importance of Privacy in iOS</h2><p><a href="https://twitter.com/stuffmc">Manuel “Stuff” Carrasco Molina</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>A lot of time Privacy of my data as a user is not a priority for Developers. Wether it’s my calendar, my contacts, my location, I want as a user to be able to use an app without all of those attacks in my privacy. I want to summarize some things an iOS developer should do to ensure the most critical user can still use my app in some regards, and not just say “I need all your information” like on other platforms. This is the beauty of iOS, being able to fine grained (although not enough) so let’s do this all together, as a beautiful community concerned by Privacy.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/03.jpg"/><hr><hr><h2>Developer experience</h2><p><a href="https://twitter.com/igrekde">Egor Tolstoy</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>Problem validation, roadmaps, usage metrics and feedback, user experience are not first-class citizens in internal platforms and tools development. I'll talk about developer experience, an approach that helps our engineers create useful, thriving and developer-oriented technical products.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/04.jpg"/><p><a href="https://speakerdeck.com/etolstoy/developer-experience-the-art-of-building-spaceships"><strong>Slides</strong></a></p><hr><hr><h2>Server-side swift without the servers?</h2><p><a href="https://twitter.com/stawecki">Mateusz Stawecki</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>Function as a service (FaaS) a.k.a. the mysterious “Serverless” is the latest frontier for cloud platforms like AWS, Azure, IBM Cloud. It promises to run your backend Swift code without having to worry about infrastructure or server maintenance. But what about your existing Kitura/Vapor applications? In this talk we’ll explore running Swift in the cloud without having to provision servers or containers. How Serverless can allow us to focus on doing what we love - writing Swift code - and sleep better at night without worrying about server uptime.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/05.jpg"/><hr><hr><h1>Day 2</h1><h2>RxSwift: debunking the myth of hard</h2><p><a href="https://twitter.com/freak4pc">Shai Mishali</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>RxSwift has been one of the most prominent and upcoming frameworks in the iOS &amp; Swift community in the past years. Its usage is becoming widespread and popular with many companies moving their code base to the Reactive world across iOS, Android, Web and Backend - making it a valuable skill to comprehend. Along with that fact thought, it seems the learning curve for RxSwift and Rx in general always seems "hard" to most people, or too hard to get started with. In this lecture I hope to debunk the myth and misconception of RxSwift being a hard concept, and put developers on the right path to start building Reactive Mobile applications for the modern world.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/06.jpg"/><hr><hr><h2>Same language, different platform - searching for synergy between iOS and Vapor</h2><p><a href="https://twitter.com/steffendsommer">Steffen Sommer</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>Being able to share code between an iOS app and a backend running server-side Swift was one of the first things I thought about when Swift went open source. It’s been a common argument for choosing a server-side Swift framework ever since, although there’s been little focus on what is actually possible. With this talk I will dive into the current possibilities and limitations for sharing code between iOS and Vapor and I will look ahead and discus how this might change in the future.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/07.jpg"/><hr><hr><h2>Mastering iOS Animation</h2><p><a href="https://twitter.com/twostraws">Paul Hudson</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>We all know that animations help your apps look better, but they also help your readers understand what's changing in your app and why. In this session you'll learn how to make fantastic animations for iOS, using the latest APIs from Apple.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/08.jpg"/><hr><hr><h2>How to ARKit 2.0</h2><p><a href="https://twitter.com/osfalmer">Oscar Falmer</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>ARKit 2.0 is coming up with iOS 12 with exciting new features such as Image Live Tracking and 3D Object Detection. Let’s dive into these two features with some technical aspects and code examples.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/09.jpg"/><hr><hr><h2>Grow your own model (ML on iOS)</h2><p><a href="https://twitter.com/codePrincess">Manu Rink</a></p><p><strong>Teaser on SwiftConf.com:</strong></p><blockquote><p>Wouldn't it be great to "just" have an own machine learning model to detect if cats are smiling or just looking evil? Or detect the own handwriting in a split of a second - completely offline? It's easy, but not simple - so let's dive into it! This talk shows how to get started with ML by training your own model which then can be used with CoreML.</p></blockquote><p><strong>Sketch notes:</strong></p><img src="../../assets/2018-09-24/10.jpg"/><p><a href="https://medium.com/@codeprincess/machine-learning-in-ios-for-the-noob-6c2cdd04b00b"><strong>Blog post</strong></a></p><hr><hr><p>To the speakers: If you want me to not mention your talk, let me know.</p><hr><hr><p>If you have any feedback ping me on <a href="https://twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/using-breakpoints-to-debug-layout</guid><title>Debugging View Layouts with Breakpoints</title><description>In this post you'll learn how to add a breakpoint in Xcode that adds a border to each subview in a view.</description><link>https://dasdom.dev/posts/using-breakpoints-to-debug-layout</link><pubDate>Fri, 17 Aug 2018 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Debugging View Layouts with Breakpoints</h1><p><a href="https://dasdom.dev/posts/why-i-still-dont-like-the-interface-builder">I don't like the Interface Builder.</a> When doing the interface in code (and even sometimes when using the Interface Builder) I'd like to see at runtime where exactly the views are positioned. Depending on the contents and the background color of the views this is not always easy.</p><p>I the past I usually changed the background color of some views and recompiled the app to see the frames of the views in the simulator. But this approach has several disadvantages.</p><p>First I needed to change the code just to be able to visually debug my layout. Second I needed to stop the debugging session and recompile to make the change visible in the simulator.</p><p>Then I saw the great WWDC session <a href="https://developer.apple.com/videos/play/wwdc2018/412/">Advanced Debugging with Xcode and LLDB</a> and thought, LLDB might have some tricks to make this process easier. And indeed it does.</p><p>Let's assume we have a login in our app. That might look like this:</p><img src="../../assets/2018-08-17/01.png" alt="Login screen"/><p>In the debug navigator in the lower left corner is a plus button. If you click it, you can add breakpoints. Add a symbolic breakpoint with the trigger <code>-[UIView didAddSubview:]</code> and add a the Debugger Command:</p><pre><code>e [(<span class="type">UIView</span> *)$arg3 setBackgroundColor:[<span class="type">UIColor</span> colorWithHue:($arg3 % <span class="number">100</span>)/<span class="number">100.0</span> saturation:<span class="number">1.0</span> brightness:<span class="number">1.0</span> alpha:<span class="number">0.5</span>]]
</code></pre><p>In Xcode 9 the UI looks like this:</p><img src="../../assets/2018-08-17/02.png" alt="Adding breakpoint in Xcode"/><p>If you now navigate to the login screen, you see something like this:</p><img src="../../assets/2018-08-17/03.png" alt="Colorful debug screen"/><p>If you geht an error like 'no known method […]', add the Debugger Command at the top <code>e @import UIKit</code> (thanks Byaruhanga Franklin):</p><img src="../../assets/2018-08-17/04.png" alt="Import UIKit"/><p>That's ... interesting.</p><p>Maybe that is to much and you just want to add a border to each view. Then change the Debugger Command to:</p><pre><code>e [[(<span class="type">UIView</span> *)$arg3 layer] setBorderColor:[[<span class="type">UIColor</span> magentaColor] <span class="type">CGColor</span>]]; [[(<span class="type">UIView</span> *)$arg3 layer] setBorderWidth:<span class="number">1</span>];
</code></pre><p>If you navigate to the login screen, you should see something like this:</p><img src="../../assets/2018-08-17/05.png" alt="Debug screen with borders"/><p>Nice! So with these breakpoints you can always visually check the frames of you views without recompiling the app. You can even go one essential step further. You make these breakpoints available in all your projects by ctr-clicking on each breakpoint and selecting 'Move Breakpoint To &gt; User'.</p><p>If you have so feedback, ping be on <a href="https://twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/snapshot-tests-with-iossnapshottestcase</guid><title>Snapshot tests with iOSSnapshotTestCase</title><description>Use snapshot tests to verify the correctness of your user interface.</description><link>https://dasdom.dev/posts/snapshot-tests-with-iossnapshottestcase</link><pubDate>Sun, 22 Jul 2018 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Snapshot tests with iOSSnapshotTestCase</h1><p>Sometimes you need to add automatic tests for the UI of your app. There are several different approaches to achieve this.</p><p>In the test you could get the elements of the screen and assert if all the frames are as you expect. Depending on the UI you want to test, this can be a lot of work.</p><p>Or you could use UI tests provided by Xcode. But those are slow and in my experience sometimes they just stop working.</p><p>There is a better alternative. Uber has an open source component called <a href="https://github.com/uber/ios-snapshot-test-case/">ios-snapshot-test-case</a>. With this you can create snapshot tests. A snapshot test compares the UI of a view with a snapshot of how the view should look like. Let’s see how this works.</p><p>The UI I would like to test looks like this:</p><img src="../../assets/2018-07-22/01.png" alt="The screen to be tested"/><p>The UI consists of a label, two text fields and a button.</p><h2>Installing iOSSnapshotTestCase using Carthage</h2><p>I’m a Carthage person. So I will show you how to use Carthage to install <code>iOSSnapshotTestCase</code> in the test target and use it to add a snapshot test for a simple login screen.</p><p>Create a Cartfile that looks like this:</p><pre><code>github <span class="string">"uber/ios-snapshot-test-case"</span>
</code></pre><p>Then ask Carthage to create the dynamic framework with the command</p><pre><code>carthage update --platform iOS
</code></pre><p>Carthage will fetch the source code from github and build the framework. When Carthage is finished, drag the framework from the <code>Carthage/Bild/iOS</code> folder to <strong>Link Binary with Libraries</strong> build phase of you test target:</p><img src="../../assets/2018-07-22/02.png" alt="Add framework"/><p>As you can see, the name of the framework is <code>FBSnapshotTestCase</code> and not iOSSnapshotTestCase. Facebook was the original author of this framework and Uber hasn't manage to change the name yet.</p><p>Next, add a new run script build phase to the test target. Put in the command</p><pre><code>/usr/local/bin/carthage copy-frameworks
</code></pre><p>and add the Input File <code>$(SRCROOT)/Carthage/Build/iOS/FBSnapshotTestCase.framework</code>. In Xcode it should look like this:</p><img src="../../assets/2018-07-22/03.png" alt="Run script phase"/><h1>Configure FBSnapshotTestCase</h1><p>Next you need to configure the directories where the snapshots should be put. You can also tell <code>FBSnapshotTestCase</code> to create a diff image whenever a snapshot test fails. This means, when a test fails, an image is created that shows the difference between the expected UI and the UI that made the test fail. That way you can figure out what changed in the UI.</p><p>Open the scheme you use of the test and add the following environment variables:</p><pre><code><span class="type">IMAGE_DIFF_DIR</span>: $(<span class="type">SOURCE_ROOT</span>)/$(<span class="type">PROJECT_NAME</span>)<span class="type">Tests</span>/<span class="type">FailureDiffs
FB_REFERENCE_IMAGE_DIR</span>: $(<span class="type">SOURCE_ROOT</span>)/$(<span class="type">PROJECT_NAME</span>)<span class="type">Tests</span>/<span class="type">ReferenceImages</span>
</code></pre><p>In Xcode this looks like this:</p><img src="../../assets/2018-07-22/04.png" alt="Environment variables"/><h1>Create the snapshot</h1><p>To create a snapshot test, add a subclass of <code>FBSnapshotTestCase</code> to your test target and add the following import statement:</p><pre><code>#import &lt;<span class="type">FBSnapshotTestCase</span>/<span class="type">FBSnapshotTestCase</span>.<span class="property">h</span>&gt;
</code></pre><p>Next add the test method:</p><pre><code>- (void)<span class="call">test_loginSnapshot</span> {
    <span class="type">UIStoryboard</span> *storyboard = [<span class="type">UIStoryboard</span> storyboardWithName:<span class="string">@"Main" bundle:nil];</span>
    <span class="type">UIViewController</span> *viewController = [storyboard instantiateInitialViewController];
    <span class="keyword">self</span>.<span class="property">recordMode</span> = <span class="keyword">true</span>;
    
    [viewController view];
    
    <span class="type">FBSnapshotVerifyView</span>(viewController.<span class="property">view</span>, <span class="keyword">nil</span>);
}
</code></pre><p>The first two lines create an instance of the view controller you want to test. The line <code>self.recoredMode = true;</code> tells the <code>FBSnapshotTestCase</code> that it should create the reference snapshot. The line <code>[viewController view];</code> triggers the loading of the view. This is necessary because otherwise the view is nil in the test. With <code>FBSnapshotVerifyView(viewController.view, nil)</code> the reference snapshot is compared with the current UI of the view.</p><p>Run the test. The test fails but it's not clear why. In Xcode it looks like the test didn't even run. Let's have a look to the log output in the debug console. There is lots and lots of text. If you look closely, there is a hint what's going on:</p><blockquote><p>[...] Library not loaded: @rpath/libswiftCore.dylib [...]</p></blockquote><p>So it seems the core lib for Swift isn't loaded. This is strange, because we don't even use Swift in the test or the production code.</p><p>The reason seems to be that the framework iOSSnapshotTestCase has some Swift in it. So we need to tell the compiler that it should load the Swift core lib (and anything else it needs to run Swift). The easies way to do that is to create a Swift test case. Xcode will then ask you if it should create a Bridging Header. Click 'Create Bridging Header'.</p><p>Run the snapshot test again. The test will fail because <code>FBSnapshotVerifyView()</code> doesn't find a reference snapshot to compare the view with. Open the directory of the test target in Finder. There is now a directory <code>ReferenceImages_64</code>. In this directory you can find all the snapshots recored in record mode.</p><p>Now remove the line <code>self.recordMode = true;</code> from the test and run the test again. The test succeeds. Nice! From now on, whenever the UI of the login screen changes you will be notified by a failing test.</p><h1>Diff images</h1><p>But how do we know that the snapshot test really works? Easy, let's change the UI and see what happens. Replace the button title with 'Login'.</p><p>The test fails and there is a new directory with the name <code>FailureDiffs</code> in the directory of the test target. In this new directory you can find all diff images of the failing tests. In my case, the diff image looks like this:</p><img src="../../assets/2018-07-22/05.png"" alt="The diff image"/><p>Awesome! With this image it should be easy to find the change in the UI that made the test fail.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/sketch-notes-at-uikonf2017</guid><title>Sketch Notes At UIKonf 2017</title><description>Sketch notes help be to stay focused during conference talks. Here are my sketch notes from UIKonf 2017.</description><link>https://dasdom.dev/posts/sketch-notes-at-uikonf2017</link><pubDate>Thu, 18 May 2017 12:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>Sketch Notes At UIKonf 2017</h1><p>I attended UIKonf (iOS developer conference in Berlin) this week. Great conference. I have been at UIKonf in 2014 but this time it was so much better for me because I talked to so many people. It's not that the people have been more open this time.</p><p>It's more like this time I met many people I knew from Twitter and Slack channels. In addition I have been grown more into the community since 2014.</p><p>Something else was different this time. For the first time I started to do sketch notes during the talks. I'm not good with sketch notes yet meaning that I cannot draw. As a result often I had to write words instead of drawing images. Nevertheless doing sketch notes helped me to stay focused and concentrated. And I still remember what was presented in most of the talks.</p><p>After each talk I published the sketch note to twitter and shared it with the speaker(s). This way the speaker got feedback about what key points I digested.</p><!--more-->
I used Notablility on my iPad. During the talks I edited the notes if necessary, for example when I first misunderstood the point or when the visual structure could be improved by moving stuff around. But I didn't change anything after the talk was over.

And here are the notes together with the links to the videos. Have fun!

## [YOLO Releases Considered Harmful](https://youtu.be/7DIVDzHtL2c)
[Cate Huston](https://twitter.com/catehstn)

![](../../assets/2017-05-18/01.png)

---

## [Review All The Thinks!](https://youtu.be/KRVdrwxIszU)
[Marciej Piotrowski](https://twitter.com/paciej00)

![](../../assets/2017-05-18/02.jpg)

---

## [High Performance App Architecture](https://youtu.be/kHG_zw75SjE)
[Marcel Weiher](https://twitter.com/mpweiher)

![](../../assets/2017-05-18/03.jpg)

---

## [Reactive Programming From Scratch](https://youtu.be/sEQiMCiMgpc)
[Thomas Visser](https://mobile.twitter.com/thomvis)

![](../../assets/2017-05-18/04.jpg)

---

## [Good Typography, Better Apps](https://youtu.be/YM2Nj691PMo)
[Frank Rausch](https://mobile.twitter.com/frankrausch)

![](../../assets/2017-05-18/05.jpg)

---

## Unsophisticated Software Development
Andreas Oetjen

Unfortunately I stopped doing sketch notes during the talk because I didn't get the key points.

---

## An iOS Developer's take on React Native
[Harry Tormey](https://twitter.com/htormey)

![](../../assets/2017-05-18/06.jpg)

---

## [Learning From Our Elders](https://youtu.be/c3Kg3c8vqsc)
[Rob Napier](https://mobile.twitter.com/cocoaphony)

![](../../assets/2017-05-18/07.jpg)

---

## [Re:Programming Language](https://youtu.be/naAR9qxVOxc)
[TJ Usiyan](https://mobile.twitter.com/griotspeak)

![](../../assets/2017-05-18/08.jpg)

---

## [Implementing Compassion](https://youtu.be/8YgN9XWE_dY)
[Gwen Weston](https://mobile.twitter.com/purpleyay)

![](../../assets/2017-05-18/09.jpg)

---

## [Move fast and keep your code quality](https://youtu.be/gsLoUN7jyNs)
[Francisco Diaz](https://mobile.twitter.com/fco_diaz)

![](../../assets/2017-05-18/10.jpg)

---

## [Strong typing from the server to the UI with GraphQL](https://youtu.be/MGHwJ-dH2Os)
[Martijn Walraven](https://mobile.twitter.com/martijnwalraven)

![](../../assets/2017-05-18/11.jpg)

---

## [Code Generation in Swift](https://youtu.be/x_viZfIe8tY)
[Olivier Halligon](https://mobile.twitter.com/aligatr)

![](../../assets/2017-05-18/12.jpg)

---

## [Developing Empathy](https://youtu.be/PUJxodCM6Sg)
[Sarah E Olson](https://mobile.twitter.com/saraheolson)

![](../../assets/2017-05-18/13.jpg)

---

## [Anything you can do, I can do better](https://youtu.be/_DuGaAkQSnM)
[Brandon Williams](https://mobile.twitter.com/mbrandonw) & [Lisa Luo](https://mobile.twitter.com/luoser)

![](../../assets/2017-05-18/14.jpg)

---

## [Auto Layout - From Trailing to Leading](https://youtu.be/xjArhdrqAn8)
[Mischa Hildebrand](https://mobile.twitter.com/DerHildebrand)

![](../../assets/2017-05-18/15.jpg)

---

## [Accessibility - iOS for All](https://youtu.be/G01Ac5njNSs)
[Sommer Panage](https://twitter.com/sommer)

![](../../assets/2017-05-18/16.jpg)

---
]]></content:encoded></item><item><guid isPermaLink="true">https://dasdom.dev/posts/why-i-still-dont-like-the-interface-builder</guid><title>Why I Still Don't Like The Interface Builder</title><description>I don't like the Interface Builder and here is why.</description><link>https://dasdom.dev/posts/why-i-still-dont-like-the-interface-builder</link><pubDate>Sat, 20 Jun 2015 16:57:00 +0200</pubDate><content:encoded><![CDATA[<h1>Why I Still Don't Like The Interface Builder</h1><p>Even with the improvements of the Interface Builder in the last years I still prefer doing iOS interfaces in code. Here is why:</p><h2>Context shift</h2><p>I'm a coder. What I do best is coding. When ever I switch from code to Interface Builder I have to switch context. Interface Builder is visual. There are many places where I have to change something to get the desired look. The mouse pointer has to move long distances on screen.</p><h2>Less conflicts</h2><p>I still encounter merge conflicts for storyboards when working with others on the same project.</p><h2>Options all over the place</h2><p>The elements in iOS become more and more complex. This means there are many options for interface elements. In Interface Builder you have to click through all the inspectors to find what you are searching for. When writing code most of the times I already know the first characters for what I'm trying to do and autocompletion does the rest.</p><h2>Easier get help</h2><p>It's easier to post code than screenshots in case you need help on StackOverflow ;). If you find code on Github you can see without downloading how the interface is build.</p><h2>No betas for you</h2><p>I had a few times that a project could not be opened by Xcode when I opened it in a beta of Xcode because the Interface Builder file structure had been changed.</p><h2>No refactoring</h2><p>Code is easier to refactor than storyboards.</p><h2>No inheritance</h2><p>It is impossible to inherit from a storyboard scene. In code you can easily make subclasses to reuse code. Using a storyboard you have to make two scenes even if they share 90% of their UI elements.</p><h2>Harder to DRY</h2><p>At work I'm working on an app that has 8 targets right now (more to come). Each target has several storyboards. Differences in the interface for the different targets are managed in the different storyboards. It turned out that this isn't a good idea. We had to fix one layout bug in 16 storyboard scenes (8 universal targets). And this happens again and again. We are right now moving most of the more complex user interfaces to code to prevent repeating ourselves.</p><h2>Layout constraints</h2><p>For me it's easier to see all the constrains of a view in code. In Interface Builder I have to open the size inspector to see the constraints. And then I see the constraints of one view. And each row is one single constraint. In code when using visual format language there are several constraints in one string. For example the visual format language sting <code>"|-[nameLabel]-[button(30)]-|"</code> represents 4 constraints on three interface elements. In combination with layout format options the layout becomes much easier to understand. At least for me.</p><h2>Performance Performance Performance</h2><p>I use a MacBook Air (Early 2015) for development. The performance of Interface Builder on that machine is far from acceptable. Here are two examples (using Xcode 6.3.2) from a real project I'm working on right now:</p><img src="../../assets/open_interface_builder.gif" alt="Switching from the code editor to Interface Builder"/><img src="../../assets/select_view.gif" alt="Switching from the code editor to Interface Builder"/><p>One could argue that a MBA isn't the right machine for a developer. But in my opinion a slow machine should slow down compilation and not editing code or user interface.</p><p>I would love to hear/read what you think. Ping my on <a href="https://twitter.com/dasdom">Twitter</a>.</p>]]></content:encoded></item></channel></rss>